MySQL Bootcamp

cloud9
https://c9.io/

$ mysql-ctl start 
Installing MySQL
 * Stopping MySQL database server mysqld
   ...done.
 * Starting MySQL database server mysqld
   ...done.
 * Checking for tables which need an upgrade, are corrupt or were 
not closed cleanly.

MySQL 5.5 database added.  Please make note of these credentials:

       Root User: cjs6891
   Database Name: c9

 * Starting MySQL database server mysqld
   ...done.

Start - mysql-ctl start
Stop  - mysql-ctl stop
Status - mysql-ctl status
CLI - mysql-ctl cli

Quit -and/or- Exit MySQL
exit;
quit;
\q;
ctrl-c

mysql> help; - List MySQL Commands

mysql> help contents;
You asked for help about help category: "Contents"
For more information, type 'help <item>', where <item> is one of the following
categories:
   Account Management
   Administration
   Compound Statements
   Data Definition
   Data Manipulation
   Data Types
   Functions
   Functions and Modifiers for Use with GROUP BY
   Geographic Features
   Help Metadata
   Language Structure
   Plugins
   Procedures
   Storage Engines
   Table Maintenance
   Transactions
   User-Defined Functions
   Utility

mysql> show databases; - shows databases, current MySQL Install

mysql> select @@hostname; - get username & hostname

mysql> CREATE DATABASE <NAME>; create a new database

mysql> DROP DATABASE <NAME>; - delete database
* Once you drop a database, it's gone!

mysql> USE <DATABASE>; - use a specific database

mysql> SELECT DATABASE(); - show what database you're "using"

The SQL CREATE TABLE Statement:
*Table Names Should Be Pluralized...

CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    column3 datatype,
   .....
);

CREATE TABLE cats
  (
    name VARCHAR(100),
    age INT
  );

mysql> SHOW TABLES; - show tables in database

mysql> SHOW COLUMNS FROM <TABLENAME>; - show columns in table

mysql> DESC <TABLENAME>; - describe a table

mysql> DROP TABLE <TABLENAME>; - delete a table
* Once you drop a table, it's gone!

The SQL INSERT INTO Statement
The INSERT INTO statement is used to insert new records in a table.

It is possible to write the INSERT INTO statement in two ways.
The first way specifies both the column names and the values to be inserted:

mysql> INSERT INTO table_name (column1, column2, column3, ...)
VALUES (value1, value2, value3, ...);

If you are adding values for all the columns of the table, you do not need to specify the column names in the SQL query. However, make sure the order of the values is in the same order as the columns in the table. The INSERT INTO syntax would be as follows:

mysql> INSERT INTO table_name
VALUES (value1, value2, value3, ...);

mysql> INSERT INTO people
    -> VALUES ('Linda', 'Belcher', 45), ('Phillip', 'Frond', 38), ('Calvin', 'Fischoeder', 70);
Query OK, 3 rows affected (0.01 sec)
Records: 3  Duplicates: 0  Warnings: 0


The SQL SELECT Statement
The SELECT statement is used to select data from a database.

mysql> SELECT * FROM table_name;

mysql> SHOW WARNINGS; - show warning message(s)


What is a NULL Value?
A field with a NULL value is a field with no value (EMPTY).

* If a field in a table is optional, it is possible to insert a new record or update a record without adding a value to this field. Then, the field will be saved with a NULL value.

*** Note: It is very important to understand that a NULL value is different from a zero value or a field that contains spaces. A field with a NULL value is one that has been left blank during record creation...

SELECT column_names
FROM table_name
WHERE column_name IS NULL;


SQL DEFAULT Constraint
The DEFAULT constraint is used to provide a default value for a column.

The default value will be added to all new records IF no other value is specified.

CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    City varchar(255) DEFAULT 'Sandnes'
);

SQL PRIMARY KEY Constraint
The PRIMARY KEY constraint uniquely identifies each record in a database table.

Primary keys must contain UNIQUE values, and cannot contain NULL values.

A table can have only one primary key, which may consist of single or multiple fields.

CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    PRIMARY KEY (ID)
);

Auto-increment allows a unique number to be generated automatically when a new record is inserted into a table.

CREATE TABLE Persons (
    ID int NOT NULL AUTO_INCREMENT,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    PRIMARY KEY (ID)
);

Table Constraints Exercise Solution
Defining The employees table:

CREATE TABLE employees (
    id INT AUTO_INCREMENT NOT NULL,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    middle_name VARCHAR(255),
    age INT NOT NULL,
    current_status VARCHAR(255) NOT NULL DEFAULT 'employed',
    PRIMARY KEY(id)
);

Another way of defining a primary key:

CREATE TABLE employees (
    id INT AUTO_INCREMENT NOT NULL PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    middle_name VARCHAR(255),
    age INT NOT NULL,
    current_status VARCHAR(255) NOT NULL DEFAULT 'employed'
);

A test INSERT:
INSERT INTO employees(last_name, first_name, age)
    VALUES("Takacs", "Robert", 41), ("Dingler","Sheila",31);


CRUD

Create - INSERT INTO
Read - SELECT
Update
Delete/Destroy

Recreate a new cats table:

DROP TABLE cats;

CREATE TABLE cats 
  ( 
     cat_id INT NOT NULL AUTO_INCREMENT, 
     name   VARCHAR(100), 
     breed  VARCHAR(100), 
     age    INT, 
     PRIMARY KEY (cat_id) 
  );

INSERT INTO cats(name, breed, age) 
VALUES ('Ringo', 'Tabby', 4),
       ('Cindy', 'Maine Coon', 10),
       ('Dumbledore', 'Maine Coon', 11),
       ('Egg', 'Persian', 4),
       ('Misty', 'Tabby', 13),
       ('George Michael', 'Ragdoll', 9),
       ('Jackson', 'Sphynx', 7);


mysql> SELECT * FROM cats;
              ^
              |----- "Give Me All Columns"

mysql> SELECT name, age FROM cats;
+----------------+------+
| name           | age  |
+----------------+------+
| Ringo          |    4 |
| Cindy          |   10 |
| Dumbledore     |   11 |
| Egg            |    4 |
| Misty          |   11 |
| George Michael |    9 |
| Jackson        |    7 |
+----------------+------+

The SQL WHERE Clause
The WHERE clause is used to filter records.

he WHERE clause is used to extract only those records that fulfill a specified condition.

SELECT column1, column2, ...
FROM table_name
WHERE condition;

mysql> SELECT * FROM cats WHERE age=4;

mysql> SELECT * FROM cats WHERE name='Egg'; - Case Insensitive

mysql> SELECT cat_id FROM cats; 
mysql> SELECT name, breed FROM cats; 
mysql> SELECT name, age FROM cats WHERE breed='Tabby'; 
mysql> SELECT cat_id, age FROM cats WHERE cat_id=age; 
mysql> SELECT * FROM cats WHERE cat_id=age;


SQL Aliases
SQL aliases are used to give a table, or a column in a table, a temporary name.
* Aliases are often used to make column names more readable. An alias only exists for the duration of the query.

Alias Column Syntax
SELECT column_name AS alias_name
FROM table_name;

Alias Table Syntax
SELECT column_name(s)
FROM table_name AS alias_name;

mysql> SELECT cat_id AS id, name FROM cats;
mysql> SELECT name AS 'Cat Name', breed AS 'Breed' FROM cats;


The SQL UPDATE Statement
The UPDATE statement is used to modify the existing records in a table.

UPDATE table_name
SET column1 = value1, column2 = value2, ...
WHERE condition;

mysql> UPDATE cats SET breed='Shorthair' WHERE breed='Tabby';

mysql> UPDATE cats SET age=14 WHERE name='Misty';

* A Good Rule of Thumb
SELECT before you UPDATE; be sure to target the data before updating the data, there is no undo button...

mysql> UPDATE cats SET name='Jack' WHERE name='jackson';
mysql> UPDATE cats SET breed='British Shorthair' WHERE name='ringo';
mysql> UPDATE cats SET age=12 WHERE breed='persian';

mysql> SELECT * FROM cats WHERE name='Jackson';
mysql> UPDATE cats SET name='Jack' WHERE name='Jackson';
mysql> SELECT * FROM cats WHERE name='Jackson';
mysql> SELECT * FROM cats WHERE name='Jack';
mysql> SELECT * FROM cats WHERE name='Ringo';
mysql> UPDATE cats SET breed='British Shorthair' WHERE name='Ringo';
mysql> SELECT * FROM cats WHERE name='Ringo';
mysql> SELECT * FROM cats;
mysql> SELECT * FROM cats WHERE breed='Maine Coon';
mysql> UPDATE cats SET age=12 WHERE breed='Maine Coon';
mysql> SELECT * FROM cats WHERE breed='Maine Coon';


The SQL DELETE Statement
The DELETE statement is used to delete existing records in a table.

mysql> DELETE FROM table_name
mysql> WHERE condition;


Delete All Records
It is possible to delete all rows in a table without deleting the table. This means that the table structure, attributes, and indexes will be intact:

DELETE FROM <TABLENAME>; - deletes all records, empty entire table!
-or-
DELETE * FROM <TABLENAME>;

mysql> DELETE FROM cats WHERE name='Egg';
mysql> SELECT * FROM cats;
mysql> SELECT * FROM cats WHERE name='egg';
mysql> DELETE FROM cats WHERE name='egg';
mysql> SELECT * FROM cats;
mysql> DELETE FROM cats;

CRUD Exercise...

CREATE TABLE closet_inventory(
    shirt_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    article VARCHAR(255) NOT NULL,
    color VARCHAR(255) NOT NULL,
    shirt_size VARCHAR(255) NOT NULL,
    last_worn INT NOT NULL);

INSERT INTO closet_inventory(article, color, shirt_size, last_worn)
    VALUES
    ('t-shirt', 'white', 'S', 10),
    ('t-shirt', 'green', 'S', 200),
    ('polo shirt', 'black', 'M', 10),
    ('tank top', 'blue', 'S', 50),
    ('t-shirt', 'pink', 'S', 0),
    ('polo shirt', 'red', 'M', 5),
    ('tank top', 'white', 'S', 200),
    ('tank top', 'blue', 'M', 15);

INSERT INTO closet_inventory(article, color, shirt_size, last_worn)
    VALUES
    ('polo shirt', 'purple', 'M', 50);

SELECT article,color FROM closet_inventory;

SELECT * FROM closet_inventory WHERE shirt_size='M';

SELECT article,color,shirt_size,last_worn FROM closet_inventory WHERE shirt_size='M';

UPDATE closet_inventory SET color='off white', shirt_size='XS' WHERE color='white';

UPDATE closet_inventory SET last_worn=0 WHERE last_worn=15;

SELECT * FROM closet_inventory WHERE last_worn=15;

SELECT * FROM closet_inventory WHERE article='polo shirt';

UPDATE closet_inventory SET shirt_size='L' WHERE article='polo shirt';

DROP TABLE closet_inventory;

DELETE FROM closet_inventory;

DELETE FROM closet_inventory WHERE article='tank top';

DELETE FROM closet_inventory WHERE last_worn=200;


Running SQL Files, using "source"
*Refer to file full path to use

mysql> source create_tbl.sql

CREATE TABLE books 
    (
        book_id INT NOT NULL AUTO_INCREMENT,
        title VARCHAR(100),
        author_fname VARCHAR(100),
        author_lname VARCHAR(100),
        released_year INT,
        stock_quantity INT,
        pages INT,
        PRIMARY KEY(book_id)
    );
 
INSERT INTO books (title, author_fname, author_lname, released_year, stock_quantity, pages)
VALUES
('The Namesake', 'Jhumpa', 'Lahiri', 2003, 32, 291),
('Norse Mythology', 'Neil', 'Gaiman',2016, 43, 304),
('American Gods', 'Neil', 'Gaiman', 2001, 12, 465),
('Interpreter of Maladies', 'Jhumpa', 'Lahiri', 1996, 97, 198),
('A Hologram for the King: A Novel', 'Dave', 'Eggers', 2012, 154, 352),
('The Circle', 'Dave', 'Eggers', 2013, 26, 504),
('The Amazing Adventures of Kavalier & Clay', 'Michael', 'Chabon', 2000, 68, 634),
('Just Kids', 'Patti', 'Smith', 2010, 55, 304),
('A Heartbreaking Work of Staggering Genius', 'Dave', 'Eggers', 2001, 104, 437),
('Coraline', 'Neil', 'Gaiman', 2003, 100, 208),
('What We Talk About When We Talk About Love: Stories', 'Raymond', 'Carver', 1981, 23, 176),
("Where I'm Calling From: Selected Stories", 'Raymond', 'Carver', 1989, 12, 526),
('White Noise', 'Don', 'DeLillo', 1985, 49, 320),
('Cannery Row', 'John', 'Steinbeck', 1945, 95, 181),
('Oblivion: Stories', 'David', 'Foster Wallace', 2004, 172, 329),
('Consider the Lobster', 'David', 'Foster Wallace', 2005, 92, 343);
 
 
SELECT database();
 
CREATE DATABASE book_shop;
 
use book_shop;
 
show tables;
 
source book_data.sql
 
DESC books;
 
SELECT * FROM books;


MySQL String Functions
https://dev.mysql.com/doc/refman/5.7/en/string-functions.html

CONCAT()  Return concatenated string

mysql> SELECT CONCAT(author_lname,', ',author_fname) FROM books;

CONCAT W/Alias
mysql> SELECT CONCAT(author_lname,', ',author_fname) AS 'Full Name' FROM books;

mysql> SELECT author_fname AS 'First Name', author_lname AS 'Last Name', CONCAT(author_fname,' ',author_lname) AS 'Full Name' FROM books;

+------------+----------------+----------------------+
| First Name | Last Name      | Full Name            |
+------------+----------------+----------------------+
| Jhumpa     | Lahiri         | Jhumpa Lahiri        |
| Neil       | Gaiman         | Neil Gaiman          |
| Neil       | Gaiman         | Neil Gaiman          |
| Jhumpa     | Lahiri         | Jhumpa Lahiri        |
| Dave       | Eggers         | Dave Eggers          |
| Dave       | Eggers         | Dave Eggers          |
| Michael    | Chabon         | Michael Chabon       |
| Patti      | Smith          | Patti Smith          |
| Dave       | Eggers         | Dave Eggers          |
| Neil       | Gaiman         | Neil Gaiman          |
| Raymond    | Carver         | Raymond Carver       |
| Raymond    | Carver         | Raymond Carver       |
| Don        | DeLillo        | Don DeLillo          |
| John       | Steinbeck      | John Steinbeck       |
| David      | Foster Wallace | David Foster Wallace |
| David      | Foster Wallace | David Foster Wallace |
+------------+----------------+----------------------+

CONCAT_WS() Return concatenate with separator

mysql> SELECT CONCAT_WS(' - ', author_lname, author_fname) FROM books;                          
+----------------------------------------------+
| CONCAT_WS(' - ', author_lname, author_fname) |
+----------------------------------------------+
| Lahiri - Jhumpa                              |
| Gaiman - Neil                                |


mysql> SELECT CONCAT_WS(', ', author_lname, author_fname) AS 'Last Name, First Name' FROM books;                           
+-----------------------+
| Last Name, First Name |
+-----------------------+
| Lahiri, Jhumpa        |
| Gaiman, Neil          |



Substring
Select Portions of a string, ex. 1st character etc.

* Index starts at 1 not 0 like an array :(

* Using 1 index number ex. SELECT SUBSTRING('Hello World', 7); prints from that index until the end

* Using a negative number -3 prints backwards from the end of the string

mysql> SELECT SUBSTRING('Hello World', 1,4);
+-------------------------------+
| SUBSTRING('Hello World', 1,4) |
+-------------------------------+
| Hell                          |
+-------------------------------+

mysql> SELECT SUBSTRING('Hello World', 7);
+-----------------------------+
| SUBSTRING('Hello World', 7) |
+-----------------------------+
| World                       |
+-----------------------------+

mysql> SELECT SUBSTRING('Hello World', -3);
+------------------------------+
| SUBSTRING('Hello World', -3) |
+------------------------------+
| rld                          |
+------------------------------+

mysql> SELECT SUBSTRING(title, 1,10) AS 'Short Title' FROM books;                                                                                         
+-------------+
| Short Title |
+-------------+
| The Namesa  |
| Norse Myth  |
| American G  |
| Interprete  |
| A Hologram  |
| The Circle  |
| The Amazin  |
| Just Kids   |
| A Heartbre  |
| Coraline    |
| What We Ta  |
| Where I'm   |
| White Nois  |
| Cannery Ro  |
| Oblivion:   |
| Consider t  |
+-------------+

Multiple Substrings...

mysql> SELECT CONCAT(SUBSTRING(title, 1, 10),'...') FROM books;
+---------------------------------------+
| CONCAT(SUBSTRING(title, 1, 10),'...') |
+---------------------------------------+
| The Namesa...                         |
| Norse Myth...                         |
| American G...                         |
| Interprete...                         |
| A Hologram...                         |
| The Circle...                         |
| The Amazin...                         |
| Just Kids...                          |
| A Heartbre...                         |
| Coraline...                           |
| What We Ta...                         |
| Where I'm ...                         |
| White Nois...                         |
| Cannery Ro...                         |
| Oblivion: ...                         |
| Consider t...                         |
+---------------------------------------+


Replace
replace parts of a string

mysql> SELECT REPLACE('Hello World', 'Hell', '%$#@');
+----------------------------------------+
| REPLACE('Hello World', 'Hell', '%$#@') |
+----------------------------------------+
| %$#@o World                            |
+----------------------------------------+

mysql> SELECT REPLACE('Hello World', 'l', '7');
+----------------------------------+
| REPLACE('Hello World', 'l', '7') |
+----------------------------------+
| He77o Wor7d                      |
+----------------------------------+

mysql> SELECT REPLACE(title, 'e', '3') FROM books;
+-----------------------------------------------------+
| REPLACE(title, 'e', '3')                            |
+-----------------------------------------------------+
| Th3 Nam3sak3                                        |
| Nors3 Mythology                                     |
| Am3rican Gods                                       |
| Int3rpr3t3r of Maladi3s                             |
| A Hologram for th3 King: A Nov3l                    |
| Th3 Circl3                                          |
| Th3 Amazing Adv3ntur3s of Kavali3r & Clay           |
| Just Kids                                           |
| A H3artbr3aking Work of Stagg3ring G3nius           |
| Coralin3                                            |
| What W3 Talk About Wh3n W3 Talk About Lov3: Stori3s |
| Wh3r3 I'm Calling From: S3l3ct3d Stori3s            |
| Whit3 Nois3                                         |
| Cann3ry Row                                         |
| Oblivion: Stori3s                                   |
| Consid3r th3 Lobst3r                                |
+-----------------------------------------------------+

mysql> SELECT SUBSTRING(REPLACE(title, 'e', '3'),1,10) AS 'Odd String...' FROM books;                                      
+---------------+
| Odd String... |
+---------------+
| Th3 Nam3sa    |
| Nors3 Myth    |
| Am3rican G    |
| Int3rpr3t3    |
| A Hologram    |
| Th3 Circl3    |
| Th3 Amazin    |
| Just Kids     |
| A H3artbr3    |
| Coralin3      |
| What W3 Ta    |
| Wh3r3 I'm     |
| Whit3 Nois    |
| Cann3ry Ro    |
| Oblivion:     |
| Consid3r t    |
+---------------+

Reverse
Reverse Strings...

mysql> SELECT REVERSE('Hello World');
+------------------------+
| REVERSE('Hello World') |
+------------------------+
| dlroW olleH            |
+------------------------+

mysql> SELECT REVERSE(author_fname) FROM books;
+-----------------------+
| REVERSE(author_fname) |
+-----------------------+
| apmuhJ                |
| lieN                  |
| lieN                  |
| apmuhJ                |
| evaD                  |
| evaD                  |
| leahciM               |
| ittaP                 |
| evaD                  |
| lieN                  |
| dnomyaR               |
| dnomyaR               |
| noD                   |
| nhoJ                  |
| divaD                 |
| divaD                 |
+-----------------------+

mysql> SELECT CONCAT(author_fname, REVERSE(author_fname)) FROM books;                                                
+---------------------------------------------+
| CONCAT(author_fname, REVERSE(author_fname)) |
+---------------------------------------------+
| JhumpaapmuhJ                                |
| NeillieN                                    |
| NeillieN                                    |
| JhumpaapmuhJ                                |
| DaveevaD                                    |
| DaveevaD                                    |
| MichaelleahciM                              |
| PattiittaP                                  |
| DaveevaD                                    |
| NeillieN                                    |
| RaymonddnomyaR                              |
| RaymonddnomyaR                              |
| DonnoD                                      |
| JohnnhoJ                                    |
| DaviddivaD                                  |
| DaviddivaD                                  |
+---------------------------------------------+

CHAR_LENGTH
Counts Characters in String

mysql> SELECT CHAR_LENGTH('Hello World');
+----------------------------+
| CHAR_LENGTH('Hello World') |
+----------------------------+
|                         11 |
+----------------------------+

mysql> SELECT author_lname, CHAR_LENGTH(author_lname) FROM books;
+----------------+---------------------------+
| author_lname   | CHAR_LENGTH(author_lname) |
+----------------+---------------------------+
| Lahiri         |                         6 |
| Gaiman         |                         6 |
| Gaiman         |                         6 |
| Lahiri         |                         6 |
| Eggers         |                         6 |
| Eggers         |                         6 |
| Chabon         |                         6 |
| Smith          |                         5 |
| Eggers         |                         6 |
| Gaiman         |                         6 |
| Carver         |                         6 |
| Carver         |                         6 |
| DeLillo        |                         7 |
| Steinbeck      |                         9 |
| Foster Wallace |                        14 |
| Foster Wallace |                        14 |
+----------------+---------------------------+

mysql> SELECT CONCAT(author_lname, ' is ', CHAR_LENGTH(author_lname), ' characters long') FROM books;                      
+-----------------------------------------------------------------------------+
| CONCAT(author_lname, ' is ', CHAR_LENGTH(author_lname), ' characters long') |
+-----------------------------------------------------------------------------+
| Lahiri is 6 characters long                                                 |
| Gaiman is 6 characters long                                                 |
| Gaiman is 6 characters long                                                 |
| Lahiri is 6 characters long                                                 |
| Eggers is 6 characters long                                                 |
| Eggers is 6 characters long                                                 |
| Chabon is 6 characters long                                                 |
| Smith is 5 characters long                                                  |
| Eggers is 6 characters long                                                 |
| Gaiman is 6 characters long                                                 |
| Carver is 6 characters long                                                 |
| Carver is 6 characters long                                                 |
| DeLillo is 7 characters long                                                |
| Steinbeck is 9 characters long                                              |
| Foster Wallace is 14 characters long                                        |
| Foster Wallace is 14 characters long                                        |
+-----------------------------------------------------------------------------+

http://sql-format.com/


UPPER() and LOWER()
Change A String's Case

mysql> SELECT UPPER ('Hello World');
+-----------------------+
| UPPER ('Hello World') |
+-----------------------+
| HELLO WORLD           |
+-----------------------+

mysql> SELECT LOWER ('Hello World');                                                                                       
+-----------------------+
| LOWER ('Hello World') |
+-----------------------+
| hello world           |
+-----------------------+

mysql> SELECT CONCAT('One of My Favorite Books is: ', UPPER(title)) FROM books;                                            
+----------------------------------------------------------------------------------+
| CONCAT('One of My Favorite Books is: ', UPPER(title))                            |
+----------------------------------------------------------------------------------+
| One of My Favorite Books is: THE NAMESAKE                                        |
| One of My Favorite Books is: NORSE MYTHOLOGY                                     |
| One of My Favorite Books is: AMERICAN GODS                                       |
| One of My Favorite Books is: INTERPRETER OF MALADIES                             |
| One of My Favorite Books is: A HOLOGRAM FOR THE KING: A NOVEL                    |
| One of My Favorite Books is: THE CIRCLE                                          |
| One of My Favorite Books is: THE AMAZING ADVENTURES OF KAVALIER & CLAY           |
| One of My Favorite Books is: JUST KIDS                                           |
| One of My Favorite Books is: A HEARTBREAKING WORK OF STAGGERING GENIUS           |
| One of My Favorite Books is: CORALINE                                            |
| One of My Favorite Books is: WHAT WE TALK ABOUT WHEN WE TALK ABOUT LOVE: STORIES |
| One of My Favorite Books is: WHERE I'M CALLING FROM: SELECTED STORIES            |
| One of My Favorite Books is: WHITE NOISE                                         |
| One of My Favorite Books is: CANNERY ROW                                         |
| One of My Favorite Books is: OBLIVION: STORIES                                   |
| One of My Favorite Books is: CONSIDER THE LOBSTER                                |
+----------------------------------------------------------------------------------+


String Function Challenges!

mysql> SELECT UPPER(REVERSE('hello world...'));
+----------------------------------+
| UPPER(REVERSE('hello world...')) |
+----------------------------------+
| ...DLROW OLLEH                   |
+----------------------------------+

mysql> SELECT REPLACE(title,' ','->') AS 'Title W/->' FROM books;                                                          
+--------------------------------------------------------------+
| Title W/->                                                   |
+--------------------------------------------------------------+
| The->Namesake                                                |
| Norse->Mythology                                             |
| American->Gods                                               |
| Interpreter->of->Maladies                                    |
| A->Hologram->for->the->King:->A->Novel                       |
| The->Circle                                                  |
| The->Amazing->Adventures->of->Kavalier->&->Clay              |
| Just->Kids                                                   |
| A->Heartbreaking->Work->of->Staggering->Genius               |
| Coraline                                                     |
| What->We->Talk->About->When->We->Talk->About->Love:->Stories |
| Where->I'm->Calling->From:->Selected->Stories                |
| White->Noise                                                 |
| Cannery->Row                                                 |
| Oblivion:->Stories                                           |
| Consider->the->Lobster                                       |
+--------------------------------------------------------------+

mysql> SELECT author_lname AS 'Forward',REVERSE(author_lname) AS 'Reverse' FROM books ORDER BY author_lname ASC;
+----------------+----------------+
| Forward        | Reverse        |
+----------------+----------------+
| Carver         | revraC         |
| Carver         | revraC         |
| Chabon         | nobahC         |
| DeLillo        | olliLeD        |
| Eggers         | sreggE         |
| Eggers         | sreggE         |
| Eggers         | sreggE         |
| Foster Wallace | ecallaW retsoF |
| Foster Wallace | ecallaW retsoF |
| Gaiman         | namiaG         |
| Gaiman         | namiaG         |
| Gaiman         | namiaG         |
| Lahiri         | irihaL         |
| Lahiri         | irihaL         |
| Smith          | htimS          |
| Steinbeck      | kcebnietS      |
+----------------+----------------+

mysql> SELECT CONCAT(UPPER(author_fname),' ',UPPER(author_lname)) AS 'Author, Full Name UPPER' FROM books ORDER BY author_lname ASC;
+-------------------------+
| Author, Full Name UPPER |
+-------------------------+
| RAYMOND CARVER          |
| RAYMOND CARVER          |
| MICHAEL CHABON          |
| DON DELILLO             |
| DAVE EGGERS             |
| DAVE EGGERS             |
| DAVE EGGERS             |
| DAVID FOSTER WALLACE    |
| DAVID FOSTER WALLACE    |
| NEIL GAIMAN             |
| NEIL GAIMAN             |
| NEIL GAIMAN             |
| JHUMPA LAHIRI           |
| JHUMPA LAHIRI           |
| PATTI SMITH             |
| JOHN STEINBECK          |
+-------------------------+

--OR--

mysql> SELECT UPPER(CONCAT(author_fname,' ',author_lname)) AS 'Author, Full Name UPPER' FROM books ORDER BY author_lname ASC;                                                                           
+-------------------------+
| Author, Full Name UPPER |
+-------------------------+
| RAYMOND CARVER          |
| RAYMOND CARVER          |
| MICHAEL CHABON          |
| DON DELILLO             |
| DAVE EGGERS             |
| DAVE EGGERS             |
| DAVE EGGERS             |
| DAVID FOSTER WALLACE    |
| DAVID FOSTER WALLACE    |
| NEIL GAIMAN             |
| NEIL GAIMAN             |
| NEIL GAIMAN             |
| JHUMPA LAHIRI           |
| JHUMPA LAHIRI           |
| PATTI SMITH             |
| JOHN STEINBECK          |
+-------------------------+

mysql> SELECT CONCAT(title,' was released in ',released_year) AS 'Blurb...' FROM books;                                    
+--------------------------------------------------------------------------+
| Blurb...                                                                 |
+--------------------------------------------------------------------------+
| The Namesake was released in 2003                                        |
| Norse Mythology was released in 2016                                     |
| American Gods was released in 2001                                       |
| Interpreter of Maladies was released in 1996                             |
| A Hologram for the King: A Novel was released in 2012                    |
| The Circle was released in 2013                                          |
| The Amazing Adventures of Kavalier & Clay was released in 2000           |
| Just Kids was released in 2010                                           |
| A Heartbreaking Work of Staggering Genius was released in 2001           |
| Coraline was released in 2003                                            |
| What We Talk About When We Talk About Love: Stories was released in 1981 |
| Where I'm Calling From: Selected Stories was released in 1989            |
| White Noise was released in 1985                                         |
| Cannery Row was released in 1945                                         |
| Oblivion: Stories was released in 2004                                   |
| Consider the Lobster was released in 2005                                |
+--------------------------------------------------------------------------+

mysql> SELECT title AS 'Title',CHAR_LENGTH(title) AS 'Character Count' FROM books;                                         
+-----------------------------------------------------+-----------------+
| Title                                               | Character Count |
+-----------------------------------------------------+-----------------+
| The Namesake                                        |              12 |
| Norse Mythology                                     |              15 |
| American Gods                                       |              13 |
| Interpreter of Maladies                             |              23 |
| A Hologram for the King: A Novel                    |              32 |
| The Circle                                          |              10 |
| The Amazing Adventures of Kavalier & Clay           |              41 |
| Just Kids                                           |               9 |
| A Heartbreaking Work of Staggering Genius           |              41 |
| Coraline                                            |               8 |
| What We Talk About When We Talk About Love: Stories |              51 |
| Where I'm Calling From: Selected Stories            |              40 |
| White Noise                                         |              11 |
| Cannery Row                                         |              11 |
| Oblivion: Stories                                   |              17 |
| Consider the Lobster                                |              20 |
+-----------------------------------------------------+-----------------+

mysql> SELECT CONCAT(SUBSTRING(title,1,10),'...') AS 'Short Title',CONCAT(author_lname,', ',author_fname) AS 'Author',CONCAT(stock_quantity,' in stock') AS Quantity FROM books ORDER BY title ASC;                                                   
+---------------+-----------------------+--------------+
| Short Title   | Author                | Quantity     |
+---------------+-----------------------+--------------+
| A Heartbre... | Eggers, Dave          | 104 in stock |
| A Hologram... | Eggers, Dave          | 154 in stock |
| American G... | Gaiman, Neil          | 12 in stock  |
| Cannery Ro... | Steinbeck, John       | 95 in stock  |
| Consider t... | Foster Wallace, David | 92 in stock  |
| Coraline...   | Gaiman, Neil          | 100 in stock |
| Interprete... | Lahiri, Jhumpa        | 97 in stock  |
| Just Kids...  | Smith, Patti          | 55 in stock  |
| Norse Myth... | Gaiman, Neil          | 43 in stock  |
| Oblivion: ... | Foster Wallace, David | 172 in stock |
| The Amazin... | Chabon, Michael       | 68 in stock  |
| The Circle... | Eggers, Dave          | 26 in stock  |
| The Namesa... | Lahiri, Jhumpa        | 32 in stock  |
| What We Ta... | Carver, Raymond       | 23 in stock  |
| Where I'm ... | Carver, Raymond       | 12 in stock  |
| White Nois... | DeLillo, Don          | 49 in stock  |
+---------------+-----------------------+--------------+


The SQL SELECT DISTINCT Statement
The SELECT DISTINCT statement is used to return only distinct (different) values.

SELECT DISTINCT column1, column2, ...
FROM table_name;

mysql> SELECT DISTINCT author_lname FROM books;
+----------------+
| author_lname   |
+----------------+
| Lahiri         |
| Gaiman         |
| Eggers         |
| Chabon         |
| Smith          |
| Carver         |
| DeLillo        |
| Steinbeck      |
| Foster Wallace |
| Harris         |
| Saunders       |
+----------------+

mysql> SELECT DISTINCT CONCAT(author_fname,' ',author_lname) FROM books;                                                   
+---------------------------------------+
| CONCAT(author_fname,' ',author_lname) |
+---------------------------------------+
| Jhumpa Lahiri                         |
| Neil Gaiman                           |
| Dave Eggers                           |
| Michael Chabon                        |
| Patti Smith                           |
| Raymond Carver                        |
| Don DeLillo                           |
| John Steinbeck                        |
| David Foster Wallace                  |
| Dan Harris                            |
| Freida Harris                         |
| George Saunders                       |
+---------------------------------------+

--or--

mysql> SELECT DISTINCT author_fname, author_lname FROM books;                                                             
+--------------+----------------+
| author_fname | author_lname   |
+--------------+----------------+
| Jhumpa       | Lahiri         |
| Neil         | Gaiman         |
| Dave         | Eggers         |
| Michael      | Chabon         |
| Patti        | Smith          |
| Raymond      | Carver         |
| Don          | DeLillo        |
| John         | Steinbeck      |
| David        | Foster Wallace |
| Dan          | Harris         |
| Freida       | Harris         |
| George       | Saunders       |
+--------------+----------------+


The SQL ORDER BY Keyword
The ORDER BY keyword is used to sort the result-set in ascending or descending order.
*Ascending By Default

SELECT column1, column2, ...
FROM table_name
ORDER BY column1, column2, ... ASC|DESC;

mysql> SELECT title FROM books ORDER BY title;
+-----------------------------------------------------+
| title                                               |
+-----------------------------------------------------+
| 10% Happier                                         |
| A Heartbreaking Work of Staggering Genius           |
| A Hologram for the King: A Novel                    |
| American Gods                                       |
| Cannery Row                                         |
| Consider the Lobster                                |
| Coraline                                            |
| fake_book                                           |
| Interpreter of Maladies                             |
| Just Kids                                           |
| Lincoln In The Bardo                                |
| Norse Mythology                                     |
| Oblivion: Stories                                   |
| The Amazing Adventures of Kavalier & Clay           |
| The Circle                                          |
| The Namesake                                        |
| What We Talk About When We Talk About Love: Stories |
| Where I'm Calling From: Selected Stories            |
| White Noise                                         |
+-----------------------------------------------------+

ORDER BY Multiple Columns, i.e. Dan Harris before Freida Harris:

mysql> SELECT author_fname,author_lname FROM books ORDER BY author_lname,author_fname ASC;
+--------------+----------------+
| author_fname | author_lname   |
+--------------+----------------+
| Raymond      | Carver         |
| Raymond      | Carver         |
| Michael      | Chabon         |
| Don          | DeLillo        |
| Dave         | Eggers         |
| Dave         | Eggers         |
| Dave         | Eggers         |
| David        | Foster Wallace |
| David        | Foster Wallace |
| Neil         | Gaiman         |
| Neil         | Gaiman         |
| Neil         | Gaiman         |
| Dan          | Harris         |
| Freida       | Harris         |
| Jhumpa       | Lahiri         |
| Jhumpa       | Lahiri         |
| George       | Saunders       |
| Patti        | Smith          |
| John         | Steinbeck      |
+--------------+----------------+


SQL Limit
Limit Number of Results, typically used W/ORDER BY

mysql> SELECT title,released_year,pages FROM books ORDER BY released_year DESC LIMIT 5;
+----------------------------------+---------------+-------+
| title                            | released_year | pages |
+----------------------------------+---------------+-------+
| Lincoln In The Bardo             |          2017 |   367 |
| Norse Mythology                  |          2016 |   304 |
| 10% Happier                      |          2014 |   256 |
| The Circle                       |          2013 |   504 |
| A Hologram for the King: A Novel |          2012 |   352 |
+----------------------------------+---------------+-------+

*** LIMIT Starts at 0

mysql> SELECT title,released_year,pages FROM books ORDER BY released_year DESC LIMIT 4,1;
+----------------------------------+---------------+-------+
| title                            | released_year | pages |
+----------------------------------+---------------+-------+
| A Hologram for the King: A Novel |          2012 |   352 |
+----------------------------------+---------------+-------+


The SQL LIKE Operator
The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.

There are two wildcards used in conjunction with the LIKE operator:
% - The percent sign represents zero, one, or multiple characters
_ - The underscore represents a single character

SELECT column1, column2, ...
FROM table_name
WHERE columnN LIKE pattern;

First Name Contains 'da'
mysql> SELECT title,author_fname FROM books WHERE author_fname LIKE '%da%';                                                
+-------------------------------------------+--------------+
| title                                     | author_fname |
+-------------------------------------------+--------------+
| A Hologram for the King: A Novel          | Dave         |
| The Circle                                | Dave         |
| A Heartbreaking Work of Staggering Genius | Dave         |
| Oblivion: Stories                         | David        |
| Consider the Lobster                      | David        |
| 10% Happier                               | Dan          |
| fake_book                                 | Freida       |
+-------------------------------------------+--------------+

First Name Starts With 'da'
mysql> SELECT title,author_fname FROM books WHERE author_fname LIKE 'da%';
+-------------------------------------------+--------------+
| title                                     | author_fname |
+-------------------------------------------+--------------+
| A Hologram for the King: A Novel          | Dave         |
| The Circle                                | Dave         |
| A Heartbreaking Work of Staggering Genius | Dave         |
| Oblivion: Stories                         | David        |
| Consider the Lobster                      | David        |
| 10% Happier                               | Dan          |
+-------------------------------------------+--------------+

First Name Ends With 'da'
mysql> SELECT title,author_fname FROM books WHERE author_fname LIKE '%da';
+-----------+--------------+
| title     | author_fname |
+-----------+--------------+
| fake_book | Freida       |
+-----------+--------------+

LIKE Underscore '_'
_ is a character

mysql> SELECT title,stock_quantity FROM books WHERE stock_quantity LIKE '____';                                            
+----------------------+----------------+
| title                | stock_quantity |
+----------------------+----------------+
| Lincoln In The Bardo |           1000 |
+----------------------+----------------+

Title With Special Character % - Use Escape Character '\'
mysql> SELECT author_lname,author_fname,title FROM books WHERE title LIKE '%\%%';                                          
+--------------+--------------+-------------+
| author_lname | author_fname | title       |
+--------------+--------------+-------------+
| Harris       | Dan          | 10% Happier |
+--------------+--------------+-------------+

mysql> SELECT title FROM books WHERE title LIKE '%stories%';                                                                
+-----------------------------------------------------+
| title                                               |
+-----------------------------------------------------+
| What We Talk About When We Talk About Love: Stories |
| Where I'm Calling From: Selected Stories            |
| Oblivion: Stories                                   |
+-----------------------------------------------------+

mysql> SELECT title,pages FROM books ORDER BY pages DESC LIMIT 1;
+-------------------------------------------+-------+
| title                                     | pages |
+-------------------------------------------+-------+
| The Amazing Adventures of Kavalier & Clay |   634 |
+-------------------------------------------+-------+

mysql> SELECT CONCAT(title,' - ',released_year) AS 'Summary' FROM books ORDER BY released_year DESC LIMIT 3;
+-----------------------------+
| Summary                     |
+-----------------------------+
| Lincoln In The Bardo - 2017 |
| Norse Mythology - 2016      |
| 10% Happier - 2014          |
+-----------------------------+

mysql> SELECT title,author_lname FROM books WHERE author_lname LIKE '% %';
+----------------------+----------------+
| title                | author_lname   |
+----------------------+----------------+
| Oblivion: Stories    | Foster Wallace |
| Consider the Lobster | Foster Wallace |
+----------------------+----------------+

mysql> SELECT CONCAT(SUBSTRING(title,1,12),'...'),released_year,stock_quantity FROM books ORDER BY stock_quantity ASC LIMIT 3;
+-------------------------------------+---------------+----------------+
| CONCAT(SUBSTRING(title,1,12),'...') | released_year | stock_quantity |
+-------------------------------------+---------------+----------------+
| American God...                     |          2001 |             12 |
| Where I'm Ca...                     |          1989 |             12 |
| What We Talk...                     |          1981 |             23 |
+-------------------------------------+---------------+----------------+

mysql> SELECT title,author_lname FROM books ORDER BY author_lname,title;
+-----------------------------------------------------+----------------+
| title                                               | author_lname   |
+-----------------------------------------------------+----------------+
| What We Talk About When We Talk About Love: Stories | Carver         |
| Where I'm Calling From: Selected Stories            | Carver         |
| The Amazing Adventures of Kavalier & Clay           | Chabon         |
| White Noise                                         | DeLillo        |
| A Heartbreaking Work of Staggering Genius           | Eggers         |
| A Hologram for the King: A Novel                    | Eggers         |
| The Circle                                          | Eggers         |
| Consider the Lobster                                | Foster Wallace |
| Oblivion: Stories                                   | Foster Wallace |
| American Gods                                       | Gaiman         |
| Coraline                                            | Gaiman         |
| Norse Mythology                                     | Gaiman         |
| 10% Happier                                         | Harris         |
| fake_book                                           | Harris         |
| Interpreter of Maladies                             | Lahiri         |
| The Namesake                                        | Lahiri         |
| Lincoln In The Bardo                                | Saunders       |
| Just Kids                                           | Smith          |
| Cannery Row                                         | Steinbeck      |
+-----------------------------------------------------+----------------+

mysql> SELECT DISTINCT UPPER(CONCAT('my favorite author is ',author_fname,' ',author_lname,'!')) AS 'Yelling...' FROM books ORDER BY author_lname;
+---------------------------------------------+
| Yelling...                                  |
+---------------------------------------------+
| MY FAVORITE AUTHOR IS RAYMOND CARVER!       |
| MY FAVORITE AUTHOR IS MICHAEL CHABON!       |
| MY FAVORITE AUTHOR IS DON DELILLO!          |
| MY FAVORITE AUTHOR IS DAVE EGGERS!          |
| MY FAVORITE AUTHOR IS DAVID FOSTER WALLACE! |
| MY FAVORITE AUTHOR IS NEIL GAIMAN!          |
| MY FAVORITE AUTHOR IS FREIDA HARRIS!        |
| MY FAVORITE AUTHOR IS DAN HARRIS!           |
| MY FAVORITE AUTHOR IS JHUMPA LAHIRI!        |
| MY FAVORITE AUTHOR IS GEORGE SAUNDERS!      |
| MY FAVORITE AUTHOR IS PATTI SMITH!          |
| MY FAVORITE AUTHOR IS JOHN STEINBECK!       |
+---------------------------------------------+


SQL Aggregate Functions
The SQL COUNT(), AVG() and SUM() Functions

The COUNT() function returns the number of rows that matches a specified criteria.

The AVG() function returns the average value of a numeric column.

The SUM() function returns the total sum of a numeric column.

mysql> SELECT COUNT(*) FROM books;
+----------+
| COUNT(*) |
+----------+
|       19 |
+----------+

mysql> SELECT COUNT(DISTINCT author_fname) FROM books;                                                                     
+------------------------------+
| COUNT(DISTINCT author_fname) |
+------------------------------+
|                           12 |
+------------------------------+

mysql> SELECT DISTINCT author_lname,author_fname FROM books;
+----------------+--------------+
| author_lname   | author_fname |
+----------------+--------------+
| Lahiri         | Jhumpa       |
| Gaiman         | Neil         |
| Eggers         | Dave         |
| Chabon         | Michael      |
| Smith          | Patti        |
| Carver         | Raymond      |
| DeLillo        | Don          |
| Steinbeck      | John         |
| Foster Wallace | David        |
| Harris         | Dan          |
| Harris         | Freida       |
| Saunders       | George       |
+----------------+--------------+
12 rows in set (0.00 sec)

mysql> SELECT COUNT(DISTINCT author_lname,author_fname) FROM books;                                                        
+-------------------------------------------+
| COUNT(DISTINCT author_lname,author_fname) |
+-------------------------------------------+
|                                        12 |
+-------------------------------------------+

mysql> SELECT title FROM books WHERE title LIKE '%the%';
+-------------------------------------------+
| title                                     |
+-------------------------------------------+
| The Namesake                              |
| A Hologram for the King: A Novel          |
| The Circle                                |
| The Amazing Adventures of Kavalier & Clay |
| Consider the Lobster                      |
| Lincoln In The Bardo                      |
+-------------------------------------------+
6 rows in set (0.00 sec)

mysql> SELECT COUNT(*) FROM books WHERE title LIKE '%the%';                                                                
+----------+
| COUNT(*) |
+----------+
|        6 |
+----------+

The SQL GROUP BY Statement
he GROUP BY statement is often used with aggregate functions (COUNT, MAX, MIN, SUM, AVG) to group the result-set by one or more columns.

SELECT column_name(s)
FROM table_name
WHERE condition
GROUP BY column_name(s)
ORDER BY column_name(s);

mysql> SELECT author_lname,author_fname, COUNT(*) FROM books GROUP BY author_lname,author_fname;
+----------------+--------------+----------+
| author_lname   | author_fname | COUNT(*) |
+----------------+--------------+----------+
| Carver         | Raymond      |        2 |
| Chabon         | Michael      |        1 |
| DeLillo        | Don          |        1 |
| Eggers         | Dave         |        3 |
| Foster Wallace | David        |        2 |
| Gaiman         | Neil         |        3 |
| Harris         | Dan          |        1 |
| Harris         | Freida       |        1 |
| Lahiri         | Jhumpa       |        2 |
| Saunders       | George       |        1 |
| Smith          | Patti        |        1 |
| Steinbeck      | John         |        1 |
+----------------+--------------+----------+

mysql> SELECT released_year, COUNT(*) FROM books GROUP BY released_year;
+---------------+----------+
| released_year | COUNT(*) |
+---------------+----------+
|          1945 |        1 |
|          1981 |        1 |
|          1985 |        1 |
|          1989 |        1 |
|          1996 |        1 |
|          2000 |        1 |
|          2001 |        3 |
|          2003 |        2 |
|          2004 |        1 |
|          2005 |        1 |
|          2010 |        1 |
|          2012 |        1 |
|          2013 |        1 |
|          2014 |        1 |
|          2016 |        1 |
|          2017 |        1 |
+---------------+----------+


The SQL MIN() and MAX() Functions
The MIN() function returns the smallest value of the selected column.

The MAX() function returns the largest value of the selected column.

mysql> SELECT MIN(released_year) FROM books;                                                                               
+--------------------+
| MIN(released_year) |
+--------------------+
|               1945 |
+--------------------+

mysql> SELECT MAX(pages) FROM books;                                                                                       
+------------+
| MAX(pages) |
+------------+
|        634 |
+------------+

mysql> SELECT title,pages FROM books ORDER BY pages ASC LIMIT 1;                                                           
+-----------------------------------------------------+-------+
| title                                               | pages |
+-----------------------------------------------------+-------+
| What We Talk About When We Talk About Love: Stories |   176 |
+-----------------------------------------------------+-------+

SAME RESULTS, SLOWER FOR SQL... ---
                                  |
                                  v
mysql> SELECT title,pages FROM books WHERE pages=(SELECT MIN(pages) FROM books);
+-----------------------------------------------------+-------+
| title                                               | pages |
+-----------------------------------------------------+-------+
| What We Talk About When We Talk About Love: Stories |   176 |
+-----------------------------------------------------+-------+

MIN / MAX W/GROUP BY

Find 1st Year Author Published Book
mysql> SELECT author_fname,author_lname, MIN(released_year) FROM books GROUP BY author_lname,author_fname;
+--------------+----------------+--------------------+
| author_fname | author_lname   | MIN(released_year) |
+--------------+----------------+--------------------+
| Raymond      | Carver         |               1981 |
| Michael      | Chabon         |               2000 |
| Don          | DeLillo        |               1985 |
| Dave         | Eggers         |               2001 |
| David        | Foster Wallace |               2004 |
| Neil         | Gaiman         |               2001 |
| Dan          | Harris         |               2014 |
| Freida       | Harris         |               2001 |
| Jhumpa       | Lahiri         |               1996 |
| George       | Saunders       |               2017 |
| Patti        | Smith          |               2010 |
| John         | Steinbeck      |               1945 |
+--------------+----------------+--------------------+

mysql> SELECT CONCAT(author_fname,' ',author_lname) AS 'Full Name', MIN(released_year) AS 'First Published' FROM books GROUP BY author_lname,author_fname ORDER BY MIN(released_year) DESC;
+----------------------+-----------------+
| Full Name            | First Published |
+----------------------+-----------------+
| George Saunders      |            2017 |
| Dan Harris           |            2014 |
| Patti Smith          |            2010 |
| David Foster Wallace |            2004 |
| Freida Harris        |            2001 |
| Neil Gaiman          |            2001 |
| Dave Eggers          |            2001 |
| Michael Chabon       |            2000 |
| Jhumpa Lahiri        |            1996 |
| Don DeLillo          |            1985 |
| Raymond Carver       |            1981 |
| John Steinbeck       |            1945 |
+----------------------+-----------------+

Find Longest(Max Pages) Published By An Author
mysql> SELECT author_fname,author_lname,MAX(pages) FROM books GROUP BY author_fname,author_lname;
+--------------+----------------+------------+
| author_fname | author_lname   | MAX(pages) |
+--------------+----------------+------------+
| Dan          | Harris         |        256 |
| Dave         | Eggers         |        504 |
| David        | Foster Wallace |        343 |
| Don          | DeLillo        |        320 |
| Freida       | Harris         |        428 |
| George       | Saunders       |        367 |
| Jhumpa       | Lahiri         |        291 |
| John         | Steinbeck      |        181 |
| Michael      | Chabon         |        634 |
| Neil         | Gaiman         |        465 |
| Patti        | Smith          |        304 |
| Raymond      | Carver         |        526 |
+--------------+----------------+------------+

mysql> SELECT CONCAT(author_fname,' ',author_lname) AS 'Full Name',MAX(pages) FROM books GROUP BY author_fname,author_lname ORDER BY MAX(pages) DESC;
+----------------------+------------+
| Full Name            | MAX(pages) |
+----------------------+------------+
| Michael Chabon       |        634 |
| Raymond Carver       |        526 |
| Dave Eggers          |        504 |
| Neil Gaiman          |        465 |
| Freida Harris        |        428 |
| George Saunders      |        367 |
| David Foster Wallace |        343 |
| Don DeLillo          |        320 |
| Patti Smith          |        304 |
| Jhumpa Lahiri        |        291 |
| Dan Harris           |        256 |
| John Steinbeck       |        181 |
+----------------------+------------+


The SUM() function returns the total sum of a numeric column.

SELECT SUM(column_name)
FROM table_name
WHERE condition;

mysql> SELECT SUM(pages) FROM books;
+------------+
| SUM(pages) |
+------------+
|       6623 |
+------------+

mysql> SELECT author_lname,author_fname,SUM(pages) FROM books GROUP BY author_lname,author_fname ORDER BY SUM(pages) DESC;
+----------------+--------------+------------+
| author_lname   | author_fname | SUM(pages) |
+----------------+--------------+------------+
| Eggers         | Dave         |       1293 |
| Gaiman         | Neil         |        977 |
| Carver         | Raymond      |        702 |
| Foster Wallace | David        |        672 |
| Chabon         | Michael      |        634 |
| Lahiri         | Jhumpa       |        489 |
| Harris         | Freida       |        428 |
| Saunders       | George       |        367 |
| DeLillo        | Don          |        320 |
| Smith          | Patti        |        304 |
| Harris         | Dan          |        256 |
| Steinbeck      | John         |        181 |
+----------------+--------------+------------+

The AVG() function returns the average value of a numeric column.

SELECT AVG(column_name)
FROM table_name
WHERE condition;

mysql> SELECT AVG(pages) FROM books;
+------------+
| AVG(pages) |
+------------+
|   348.5789 |
+------------+

mysql> SELECT AVG(released_year) FROM books;                                                                               
+--------------------+
| AVG(released_year) |
+--------------------+
|          1999.7895 |
+--------------------+

mysql> SELECT author_fname,author_lname,AVG(pages) FROM books GROUP BY author_lname,author_fname;                     
+--------------+----------------+------------+
| author_fname | author_lname   | AVG(pages) |
+--------------+----------------+------------+
| Raymond      | Carver         |   351.0000 |
| Michael      | Chabon         |   634.0000 |
| Don          | DeLillo        |   320.0000 |
| Dave         | Eggers         |   431.0000 |
| David        | Foster Wallace |   336.0000 |
| Neil         | Gaiman         |   325.6667 |
| Dan          | Harris         |   256.0000 |
| Freida       | Harris         |   428.0000 |
| Jhumpa       | Lahiri         |   244.5000 |
| George       | Saunders       |   367.0000 |
| Patti        | Smith          |   304.0000 |
| John         | Steinbeck      |   181.0000 |
+--------------+----------------+------------+

mysql> SELECT released_year,AVG(stock_quantity) FROM books GROUP BY released_year ORDER BY released_year DESC;
+---------------+---------------------+
| released_year | AVG(stock_quantity) |
+---------------+---------------------+
|          2017 |           1000.0000 |
|          2016 |             43.0000 |
|          2014 |             29.0000 |
|          2013 |             26.0000 |
|          2012 |            154.0000 |
|          2010 |             55.0000 |
|          2005 |             92.0000 |
|          2004 |            172.0000 |
|          2003 |             66.0000 |
|          2001 |            134.3333 |
|          2000 |             68.0000 |
|          1996 |             97.0000 |
|          1989 |             12.0000 |
|          1985 |             49.0000 |
|          1981 |             23.0000 |
|          1945 |             95.0000 |
+---------------+---------------------+


Aggregate Function Challenge

Print Total Number of Books In Database
mysql> SELECT COUNT(title) FROM books;
+--------------+
| COUNT(title) |
+--------------+
|           19 |
+--------------+

--or--

mysql> SELECT COUNT(*) FROM books;


mysql> SELECT COUNT(title),released_year FROM books GROUP BY released_year ORDER BY released_year DESC;
+--------------+---------------+
| COUNT(title) | released_year |
+--------------+---------------+
|            1 |          2017 |
|            1 |          2016 |
|            1 |          2014 |
|            1 |          2013 |
|            1 |          2012 |
|            1 |          2010 |
|            1 |          2005 |
|            1 |          2004 |
|            2 |          2003 |
|            3 |          2001 |
|            1 |          2000 |
|            1 |          1996 |
|            1 |          1989 |
|            1 |          1985 |
|            1 |          1981 |
|            1 |          1945 |
+--------------+---------------+

--or--

mysql> SELECT COUNT(title),released_year FROM books GROUP BY released_year ORDER BY released_year DESC;


mysql> SELECT SUM(stock_quantity) FROM books;                        
+---------------------+
| SUM(stock_quantity) |
+---------------------+
|                2450 |
+---------------------+


Average Release Year By Author
mysql> SELECT author_fname,author_lname,AVG(released_year) FROM books GROUP BY author_lname,author_fname;
+--------------+----------------+--------------------+
| author_fname | author_lname   | AVG(released_year) |
+--------------+----------------+--------------------+
| Raymond      | Carver         |          1985.0000 |
| Michael      | Chabon         |          2000.0000 |
| Don          | DeLillo        |          1985.0000 |
| Dave         | Eggers         |          2008.6667 |
| David        | Foster Wallace |          2004.5000 |
| Neil         | Gaiman         |          2006.6667 |
| Dan          | Harris         |          2014.0000 |
| Freida       | Harris         |          2001.0000 |
| Jhumpa       | Lahiri         |          1999.5000 |
| George       | Saunders       |          2017.0000 |
| Patti        | Smith          |          2010.0000 |
| John         | Steinbeck      |          1945.0000 |
+--------------+----------------+--------------------+

Author Who Wrote The Longest Book
mysql> SELECT CONCAT(author_fname,', ',author_fname) AS 'Full Name',title AS 'Title',pages AS 'Page Count' FROM books ORDER BY pages DESC LIMIT 1;
+------------------+-------------------------------------------+------------+
| Full Name        | Title                                     | Page Count |
+------------------+-------------------------------------------+------------+
| Michael, Michael | The Amazing Adventures of Kavalier & Clay |        634 |
+------------------+-------------------------------------------+------------+

Books By Year, Average Pages
mysql> SELECT released_year,COUNT(title),AVG(pages) FROM books GROUP BY released_year ORDER BY released_year DESC;
+---------------+--------------+------------+
| released_year | COUNT(title) | AVG(pages) |
+---------------+--------------+------------+
|          2017 |            1 |   367.0000 |
|          2016 |            1 |   304.0000 |
|          2014 |            1 |   256.0000 |
|          2013 |            1 |   504.0000 |
|          2012 |            1 |   352.0000 |
|          2010 |            1 |   304.0000 |
|          2005 |            1 |   343.0000 |
|          2004 |            1 |   329.0000 |
|          2003 |            2 |   249.5000 |
|          2001 |            3 |   443.3333 |
|          2000 |            1 |   634.0000 |
|          1996 |            1 |   198.0000 |
|          1989 |            1 |   526.0000 |
|          1985 |            1 |   320.0000 |
|          1981 |            1 |   176.0000 |
|          1945 |            1 |   181.0000 |
+---------------+--------------+------------+

MySQL Data Types
In MySQL there are three main data types : text, number, and Date/Time types.

https://www.w3schools.com/sql/sql_datatypes.asp
https://dev.mysql.com/doc/refman/5.7/en/data-types.html

Text
CHAR, Holds a fixed length string (can contain letters, numbers, and special characters). The fixed size is specified in parenthesis. Can store up to 255 characters

* CHAR is faster for fixed named text, ex. State Abbreviations NY/CA, Y/N, Sex 
M/F

Numeric
INT, Numbers W/O Decimal Places

DECIMAL(size,d)
          |  |
          |  - Number of Decimal Places
          - Number of Digits

Example:
DECIMAL(5,2)
<-- 5 Digits, 2 Decimal -->
          999.99

FLOAT & DOUBLE, store large numbers using less space BUT it comes at the cost of precision; floating-point values are approximate and not stored as exact values

FLOAT is ~7 Characters of Precision
DOUBLE is ~14 Characters of Precision

* Always try to use DECIMAL unless precision doesn't matter...


Date/Time
DATE() - Format: YYYY-MM-DD
* The supported range is from '1000-01-01' to '9999-12-31'

TIME() - Format: HH:MM:SS
* The supported range is from '-838:59:59' to '838:59:59'

DATETIME() - Format: YYYY-MM-DD HH:MM:SS
* The supported range is from '1000-01-01 00:00:00' to '9999-12-31 23:59:59'

CURDATE() - Current DATE()
CURTIME() - Current TIME()
NOW() - Current DATETIME()

Formatting Dates
https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html
DAY()
DAYNAME()
DAYOFWEEK()
DAYOFYEAR()
MONTH()
MONTHNAME()
HOUR()

mysql> SELECT name,birthdate,DAY(birthdate) FROM people;
+--------+------------+----------------+
| name   | birthdate  | DAY(birthdate) |
+--------+------------+----------------+
| Jasper | 2016-12-08 |              8 |
| Helen  | 1988-09-18 |             18 |
| Stefan | 1963-07-30 |             30 |
+--------+------------+----------------+

mysql> SELECT name,birthdate,DAYNAME(birthdate) FROM people;                                                               
+--------+------------+--------------------+
| name   | birthdate  | DAYNAME(birthdate) |
+--------+------------+--------------------+
| Jasper | 2016-12-08 | Thursday           |
| Helen  | 1988-09-18 | Sunday             |
| Stefan | 1963-07-30 | Tuesday            |
+--------+------------+--------------------+

mysql> SELECT name,birthdate,DAYOFWEEK(birthdate) FROM people;                                                             
+--------+------------+----------------------+
| name   | birthdate  | DAYOFWEEK(birthdate) |
+--------+------------+----------------------+
| Jasper | 2016-12-08 |                    5 |
| Helen  | 1988-09-18 |                    1 |
| Stefan | 1963-07-30 |                    3 |
+--------+------------+----------------------+

mysql> SELECT name,birthdate,DAYOFYEAR(birthdate) FROM people;                                                             
+--------+------------+----------------------+
| name   | birthdate  | DAYOFYEAR(birthdate) |
+--------+------------+----------------------+
| Jasper | 2016-12-08 |                  343 |
| Helen  | 1988-09-18 |                  262 |
| Stefan | 1963-07-30 |                  211 |
+--------+------------+----------------------+

mysql> SELECT name,birthday,MONTHNAME(birthday) FROM people;                                                               
+--------+---------------------+---------------------+
| name   | birthday            | MONTHNAME(birthday) |
+--------+---------------------+---------------------+
| Jasper | 2016-12-08 18:15:05 | December            |
| Helen  | 1988-09-18 03:18:56 | September           |
| Stefan | 1963-07-30 19:06:17 | July                |
+--------+---------------------+---------------------+

mysql> SELECT name,birthday,HOUR(birthday) FROM people;                                                                    
+--------+---------------------+----------------+
| name   | birthday            | HOUR(birthday) |
+--------+---------------------+----------------+
| Jasper | 2016-12-08 18:15:05 |             18 |
| Helen  | 1988-09-18 03:18:56 |              3 |
| Stefan | 1963-07-30 19:06:17 |             19 |
+--------+---------------------+----------------+

mysql> SELECT name,birthday,MINUTE(birthday) FROM people;                                                                  
+--------+---------------------+------------------+
| name   | birthday            | MINUTE(birthday) |
+--------+---------------------+------------------+
| Jasper | 2016-12-08 18:15:05 |               15 |
| Helen  | 1988-09-18 03:18:56 |               18 |
| Stefan | 1963-07-30 19:06:17 |                6 |
+--------+---------------------+------------------+

mysql> SELECT CONCAT(MONTHNAME(birthday),' ',DAY(birthday),', ',YEAR(birthday)) FROM people;                               
+-------------------------------------------------------------------+
| CONCAT(MONTHNAME(birthday),' ',DAY(birthday),', ',YEAR(birthday)) |
+-------------------------------------------------------------------+
| December 8, 2016                                                  |
| September 18, 1988                                                |
| July 30, 1963                                                     |
+-------------------------------------------------------------------+

Date Format Function
https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html#function_date-format

mysql> SELECT name,DATE_FORMAT(birthday,'%W, %M %D %Y') FROM people;                                                       
+--------+--------------------------------------+
| name   | DATE_FORMAT(birthday,'%W, %M %D %Y') |
+--------+--------------------------------------+
| Jasper | Thursday, December 8th 2016          |
| Helen  | Sunday, September 18th 1988          |
| Stefan | Tuesday, July 30th 1963              |
+--------+--------------------------------------+

mysql> SELECT name,DATE_FORMAT(birthday,'Was Born on a %W') FROM people;                                                   
+--------+------------------------------------------+
| name   | DATE_FORMAT(birthday,'Was Born on a %W') |
+--------+------------------------------------------+
| Jasper | Was Born on a Thursday                   |
| Helen  | Was Born on a Sunday                     |
| Stefan | Was Born on a Tuesday                    |
+--------+------------------------------------------+


MySQL DATEDIFF
https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html#function_datediff

mysql> SELECT name,birthdate,DATEDIFF(NOW(), birthdate) FROM people;                                                                      
+--------+------------+----------------------------+
| name   | birthdate  | DATEDIFF(NOW(), birthdate) |
+--------+------------+----------------------------+
| Jasper | 2016-12-08 |                        242 |
| Helen  | 1988-09-18 |                      10550 |
| Stefan | 1963-07-30 |                      19732 |
+--------+------------+----------------------------+

DATE_ADD
DATE_SUB

mysql> SELECT name,birthday,DATE_ADD(birthday, INTERVAL 1 MONTH) FROM people;                                                             
+--------+---------------------+--------------------------------------+
| name   | birthday            | DATE_ADD(birthday, INTERVAL 1 MONTH) |
+--------+---------------------+--------------------------------------+
| Jasper | 2016-12-08 18:15:05 | 2017-01-08 18:15:05                  |
| Helen  | 1988-09-18 03:18:56 | 1988-10-18 03:18:56                  |
| Stefan | 1963-07-30 19:06:17 | 1963-08-30 19:06:17                  |
+--------+---------------------+--------------------------------------+

--or--

mysql> SELECT name,birthday,birthday + INTERVAL 1 MONTH FROM people;
+--------+---------------------+-----------------------------+
| name   | birthday            | birthday + INTERVAL 1 MONTH |
+--------+---------------------+-----------------------------+
| Jasper | 2016-12-08 18:15:05 | 2017-01-08 18:15:05         |
| Helen  | 1988-09-18 03:18:56 | 1988-10-18 03:18:56         |
| Stefan | 1963-07-30 19:06:17 | 1963-08-30 19:06:17         |
+--------+---------------------+-----------------------------+

mysql> SELECT name,birthday,birthday - INTERVAL 1 MONTH FROM people;                                                                      
+--------+---------------------+-----------------------------+
| name   | birthday            | birthday - INTERVAL 1 MONTH |
+--------+---------------------+-----------------------------+
| Jasper | 2016-12-08 18:15:05 | 2016-11-08 18:15:05         |
| Helen  | 1988-09-18 03:18:56 | 1988-08-18 03:18:56         |
| Stefan | 1963-07-30 19:06:17 | 1963-06-30 19:06:17         |
+--------+---------------------+-----------------------------+

ADD 1 Month, 1 Year to a date
mysql> SELECT name,birthday,birthday - INTERVAL 1 MONTH, birthday + INTERVAL 1 YEAR FROM people;
+--------+---------------------+-----------------------------+----------------------------+
| name   | birthday            | birthday - INTERVAL 1 MONTH | birthday + INTERVAL 1 YEAR |
+--------+---------------------+-----------------------------+----------------------------+
| Jasper | 2016-12-08 18:15:05 | 2016-11-08 18:15:05         | 2017-12-08 18:15:05        |
| Helen  | 1988-09-18 03:18:56 | 1988-08-18 03:18:56         | 1989-09-18 03:18:56        |
| Stefan | 1963-07-30 19:06:17 | 1963-06-30 19:06:17         | 1964-07-30 19:06:17        |
+--------+---------------------+-----------------------------+----------------------------+

https://dev.mysql.com/doc/refman/5.7/en/datetime.html

TIMESTAMP
The supported range of '1970-01-01 00:00:01' UTC to '2038-01-19 03:14:07' UTC

DATETIME
The supported range is '1000-01-01 00:00:00' to '9999-12-31 23:59:59'

mysql> CREATE TABLE comment(content VARCHAR(255), changed_at TIMESTAMP DEFAULT NOW());

mysql> CREATE TABLE voice(content VARCHAR(255), changed_at TIMESTAMP DEFAULT NOW() ON UPDATE CURRENT_TIMESTAMP); 

--or--

mysql> CREATE TABLE voice(content VARCHAR(255), changed_at TIMESTAMP DEFAULT NOW() ON UPDATE NOW();

mysql> SELECT CURTIME();
mysql> SELECT CURDATE();

mysql> SELECT DAYOFWEEK(NOW());

mysql> SELECT DATE_FORMAT(NOW(), '%W');
+--------------------------+
| DATE_FORMAT(NOW(), '%W') |
+--------------------------+
| Tuesday                  |
+--------------------------+

mysql> SELECT DATE_FORMAT(NOW(), '%W, %M');
+------------------------------+
| DATE_FORMAT(NOW(), '%W, %M') |
+------------------------------+
| Tuesday, August              |
+------------------------------+

mysql> SELECT DATE_FORMAT(NOW(), '%m/%d/%Y');
+--------------------------------+
| DATE_FORMAT(NOW(), '%m/%d/%Y') |
+--------------------------------+
| 08/08/2017                     |
+--------------------------------+

mysql> SELECT DATE_FORMAT(NOW(), '%M %D, %Y at %T');
+---------------------------------------+
| DATE_FORMAT(NOW(), '%M %D, %Y at %T') |
+---------------------------------------+
| August 8th, 2017 at 15:05:06          |
+---------------------------------------+

mysql> CREATE TABLE tweets(content VARCHAR(140), username VARCHAR(25), time TIMESTAMP DEFAULT NOW() ON UPDATE NOW());


Logical Operators
The SQL AND, OR and NOT Operators
The WHERE clause can be combined with AND, OR, and NOT operators.

 - The AND operator displays a record if all the conditions separated by AND is TRUE
  - The OR operator displays a record if any of the conditions separated by OR is TRUE

https://dev.mysql.com/doc/refman/5.7/en/non-typed-operators.html

Not equal operator
!=

mysql> SELECT title,released_year FROM books WHERE released_year != 2017;

mysql> SELECT title,author_lname FROM books WHERE author_lname != 'harris';

LIKE / NOT LIKE

mysql> SELECT title FROM books WHERE title LIKE 'w%';

+-----------------------------------------------------+
| title                                               |
+-----------------------------------------------------+
| What We Talk About When We Talk About Love: Stories |
| Where I'm Calling From: Selected Stories            |
| White Noise                                         |
+-----------------------------------------------------+

mysql> SELECT title FROM books WHERE title NOT LIKE 'w%';                                                                                 
+-------------------------------------------+
| title                                     |
+-------------------------------------------+
| The Namesake                              |
| Norse Mythology                           |
| American Gods                             |
| Interpreter of Maladies                   |
| A Hologram for the King: A Novel          |
| The Circle                                |
| The Amazing Adventures of Kavalier & Clay |
| Just Kids                                 |
| A Heartbreaking Work of Staggering Genius |
| Coraline                                  |
| Cannery Row                               |
| Oblivion: Stories                         |
| Consider the Lobster                      |
| 10% Happier                               |
| fake_book                                 |
| Lincoln In The Bardo                      |
+-------------------------------------------+

Greater than operator
>

mysql> SELECT * FROM books WHERE released_year > 2000;

Greater than or equal operator
>=

mysql> SELECT title,released_year FROM books WHERE released_year >= 2000 ORDER BY released_year DESC;

Less than operator
<

Less than or equal operator
<=

mysql> SELECT title,released_year,stock_quantity FROM books WHERE released_year < 2000;
+-----------------------------------------------------+---------------+----------------+
| title                                               | released_year | stock_quantity |
+-----------------------------------------------------+---------------+----------------+
| Interpreter of Maladies                             |          1996 |             97 |
| What We Talk About When We Talk About Love: Stories |          1981 |             23 |
| Where I'm Calling From: Selected Stories            |          1989 |             12 |
| White Noise                                         |          1985 |             49 |
| Cannery Row                                         |          1945 |             95 |
+-----------------------------------------------------+---------------+----------------+


Logical AND
AND, &&

mysql> SELECT * FROM books WHERE author_lname='eggers' AND released_year > 2010;
+---------+----------------------------------+--------------+--------------+---------------+----------------+-------+
| book_id | title                            | author_fname | author_lname | released_year | stock_quantity | pages |
+---------+----------------------------------+--------------+--------------+---------------+----------------+-------+
|       5 | A Hologram for the King: A Novel | Dave         | Eggers       |          2012 |            154 |   352 |
|       6 | The Circle                       | Dave         | Eggers       |          2013 |             26 |   504 |
+---------+----------------------------------+--------------+--------------+---------------+----------------+-------+


mysql> SELECT * FROM books WHERE author_lname='eggers' AND released_year > 2010 AND title LIKE '%novel%';
+---------+----------------------------------+--------------+--------------+---------------+----------------+-------+
| book_id | title                            | author_fname | author_lname | released_year | stock_quantity | pages |
+---------+----------------------------------+--------------+--------------+---------------+----------------+-------+
|       5 | A Hologram for the King: A Novel | Dave         | Eggers       |          2012 |            154 |   352 |
+---------+----------------------------------+--------------+--------------+---------------+----------------+-------+


Logical OR
OR, ||

mysql> SELECT * FROM books WHERE author_lname='eggers' || released_year > 2010;                                                           
+---------+-------------------------------------------+--------------+--------------+---------------+----------------+-------+
| book_id | title                                     | author_fname | author_lname | released_year | stock_quantity | pages |
+---------+-------------------------------------------+--------------+--------------+---------------+----------------+-------+
|       2 | Norse Mythology                           | Neil         | Gaiman       |          2016 |             43 |   304 |
|       5 | A Hologram for the King: A Novel          | Dave         | Eggers       |          2012 |            154 |   352 |
|       6 | The Circle                                | Dave         | Eggers       |          2013 |             26 |   504 |
|       9 | A Heartbreaking Work of Staggering Genius | Dave         | Eggers       |          2001 |            104 |   437 |
|      17 | 10% Happier                               | Dan          | Harris       |          2014 |             29 |   256 |
|      19 | Lincoln In The Bardo                      | George       | Saunders     |          2017 |           1000 |   367 |
+---------+-------------------------------------------+--------------+--------------+---------------+----------------+-------+


The SQL BETWEEN/NOT BETWEEN Operator
The BETWEEN operator selects values within a given range. The values can be numbers, text, or dates.
The BETWEEN operator is inclusive: begin and end values are included. 

SELECT column_name(s)
FROM table_name
WHERE column_name BETWEEN value1 AND value2;

Between using >= <=

mysql> SELECT * FROM books WHERE released_year >= 2004 AND released_year <=2015;

BETWEEN
mysql> SELECT title,released_year FROM books WHERE released_year BETWEEN 2004 AND 2015 ORDER BY released_year DESC;
+----------------------------------+---------------+
| title                            | released_year |
+----------------------------------+---------------+
| 10% Happier                      |          2014 |
| The Circle                       |          2013 |
| A Hologram for the King: A Novel |          2012 |
| Just Kids                        |          2010 |
| Consider the Lobster             |          2005 |
| Oblivion: Stories                |          2004 |
+----------------------------------+---------------+

NOT BETWEEN
mysql> SELECT title,released_year FROM books WHERE released_year NOT BETWEEN 2004 AND 2015 ORDER BY released_year DESC;                   
+-----------------------------------------------------+---------------+
| title                                               | released_year |
+-----------------------------------------------------+---------------+
| Lincoln In The Bardo                                |          2017 |
| Norse Mythology                                     |          2016 |
| Coraline                                            |          2003 |
| The Namesake                                        |          2003 |
| A Heartbreaking Work of Staggering Genius           |          2001 |
| American Gods                                       |          2001 |
| fake_book                                           |          2001 |
| The Amazing Adventures of Kavalier & Clay           |          2000 |
| Interpreter of Maladies                             |          1996 |
| Where I'm Calling From: Selected Stories            |          1989 |
| White Noise                                         |          1985 |
| What We Talk About When We Talk About Love: Stories |          1981 |
| Cannery Row                                         |          1945 |
+-----------------------------------------------------+---------------+

CAST
* For best results when using BETWEEN with date or time values, use CAST() to explicitly convert the values to the desired data type

mysql> SELECT CAST('2017-08-08' AS DATETIME);

mysql> SELECT name,birthday FROM people WHERE birthday BETWEEN CAST('1980-01-01' AS DATETIME) AND CAST('2000-01-01' AS DATETIME);         
+-------+---------------------+
| name  | birthday            |
+-------+---------------------+
| Helen | 1988-09-18 03:18:56 |
+-------+---------------------+


The SQL IN Operator
The IN operator allows you to specify multiple values in a WHERE clause.
* The IN operator is a shorthand for multiple OR conditions.

SELECT column_name(s)
FROM table_name
WHERE column_name IN (value1, value2, ...);

SELECT column_name(s)
FROM table_name
WHERE column_name IN (SELECT STATEMENT);

mysql> SELECT title,author_lname FROM books WHERE author_lname IN('harris', 'lahiri', 'gaiman');                                          
+-------------------------+--------------+
| title                   | author_lname |
+-------------------------+--------------+
| The Namesake            | Lahiri       |
| Norse Mythology         | Gaiman       |
| American Gods           | Gaiman       |
| Interpreter of Maladies | Lahiri       |
| Coraline                | Gaiman       |
| 10% Happier             | Harris       |
| fake_book               | Harris       |
+-------------------------+--------------+

NOT IN
Does opposite of IN
* The NOT IN operator is a shorthand from multiple != AND

mysql> SELECT title,author_lname,released_year FROM books WHERE released_year NOT IN(2000,2001,2002,2003,2004,2005) ORDER BY released_year DESC;


  MODULO %, testing for even numbers example

Books Released, Odd Year !=0
mysql> SELECT title,author_lname,released_year FROM books WHERE released_year >=2000 AND released_year % 2 !=0 ORDER BY released_year DESC;
+-------------------------------------------+----------------+---------------+
| title                                     | author_lname   | released_year |
+-------------------------------------------+----------------+---------------+
| Lincoln In The Bardo                      | Saunders       |          2017 |
| The Circle                                | Eggers         |          2013 |
| Consider the Lobster                      | Foster Wallace |          2005 |
| The Namesake                              | Lahiri         |          2003 |
| Coraline                                  | Gaiman         |          2003 |
| American Gods                             | Gaiman         |          2001 |
| A Heartbreaking Work of Staggering Genius | Eggers         |          2001 |
| fake_book                                 | Harris         |          2001 |
+-------------------------------------------+----------------+---------------+

Books Released, Even Year
mysql> SELECT title,author_lname,released_year FROM books WHERE released_year >=2000 AND released_year % 2 = 0 ORDER BY released_year DESC;
+-------------------------------------------+----------------+---------------+
| title                                     | author_lname   | released_year |
+-------------------------------------------+----------------+---------------+
| Norse Mythology                           | Gaiman         |          2016 |
| 10% Happier                               | Harris         |          2014 |
| A Hologram for the King: A Novel          | Eggers         |          2012 |
| Just Kids                                 | Smith          |          2010 |
| Oblivion: Stories                         | Foster Wallace |          2004 |
| The Amazing Adventures of Kavalier & Clay | Chabon         |          2000 |
+-------------------------------------------+----------------+---------------+


CASE Operator(s)

SELECT title,released_year,author_lname,
    CASE
        WHEN released_year >= 2000 THEN 'Modern Literature'
        ELSE '20th Century Literature'
    END AS GENRE
FROM books;

+-----------------------------------------------------+---------------+----------------+-------------------------+
| title                                               | released_year | author_lname   | GENRE                   |
+-----------------------------------------------------+---------------+----------------+-------------------------+
| The Namesake                                        |          2003 | Lahiri         | Modern Literature       |
| Norse Mythology                                     |          2016 | Gaiman         | Modern Literature       |
| American Gods                                       |          2001 | Gaiman         | Modern Literature       |
| Interpreter of Maladies                             |          1996 | Lahiri         | 20th Century Literature |
| A Hologram for the King: A Novel                    |          2012 | Eggers         | Modern Literature       |
| The Circle                                          |          2013 | Eggers         | Modern Literature       |
| The Amazing Adventures of Kavalier & Clay           |          2000 | Chabon         | Modern Literature       |
| Just Kids                                           |          2010 | Smith          | Modern Literature       |
| A Heartbreaking Work of Staggering Genius           |          2001 | Eggers         | Modern Literature       |
| Coraline                                            |          2003 | Gaiman         | Modern Literature       |
| What We Talk About When We Talk About Love: Stories |          1981 | Carver         | 20th Century Literature |
| Where I'm Calling From: Selected Stories            |          1989 | Carver         | 20th Century Literature |
| White Noise                                         |          1985 | DeLillo        | 20th Century Literature |
| Cannery Row                                         |          1945 | Steinbeck      | 20th Century Literature |
| Oblivion: Stories                                   |          2004 | Foster Wallace | Modern Literature       |
| Consider the Lobster                                |          2005 | Foster Wallace | Modern Literature       |
| 10% Happier                                         |          2014 | Harris         | Modern Literature       |
| fake_book                                           |          2001 | Harris         | Modern Literature       |
| Lincoln In The Bardo                                |          2017 | Saunders       | Modern Literature       |
+-----------------------------------------------------+---------------+----------------+-------------------------+

SELECT title,author_lname,stock_quantity,
    CASE
        WHEN stock_quantity BETWEEN 0 AND 50 THEN '*'
        WHEN stock_quantity BETWEEN 51 AND 100 THEN '**'
        ELSE '***'
    END AS STOCK
FROM books;

+-----------------------------------------------------+----------------+----------------+-------+
| title                                               | author_lname   | stock_quantity | STOCK |
+-----------------------------------------------------+----------------+----------------+-------+
| The Namesake                                        | Lahiri         |             32 | *     |
| Norse Mythology                                     | Gaiman         |             43 | *     |
| American Gods                                       | Gaiman         |             12 | *     |
| Interpreter of Maladies                             | Lahiri         |             97 | **    |
| A Hologram for the King: A Novel                    | Eggers         |            154 | ***   |
| The Circle                                          | Eggers         |             26 | *     |
| The Amazing Adventures of Kavalier & Clay           | Chabon         |             68 | **    |
| Just Kids                                           | Smith          |             55 | **    |
| A Heartbreaking Work of Staggering Genius           | Eggers         |            104 | ***   |
| Coraline                                            | Gaiman         |            100 | **    |
| What We Talk About When We Talk About Love: Stories | Carver         |             23 | *     |
| Where I'm Calling From: Selected Stories            | Carver         |             12 | *     |
| White Noise                                         | DeLillo        |             49 | *     |
| Cannery Row                                         | Steinbeck      |             95 | **    |
| Oblivion: Stories                                   | Foster Wallace |            172 | ***   |
| Consider the Lobster                                | Foster Wallace |             92 | **    |
| 10% Happier                                         | Harris         |             29 | *     |
| fake_book                                           | Harris         |            287 | ***   |
| Lincoln In The Bardo                                | Saunders       |           1000 | ***   |
+-----------------------------------------------------+----------------+----------------+-------+

--OR--

SELECT title,author_lname,stock_quantity,
    CASE
        WHEN stock_quantity <=50  THEN'*'
        WHEN stock_quantity <=100 THEN '**'
        WHEN stock_quantity <=150 THEN '***'
        WHEN stock_quantity <=200 THEN '****'
        ELSE '*****'
    END AS STOCK
FROM books;


mysql> SELECT * FROM books WHERE released_year < 1980;

mysql> SELECT author_lname,title FROM books WHERE author_lname='Eggers' || author_lname='Chabon';
--or--
mysql> SELECT author_lname,title FROM books WHERE author_lname IN('Eggers','Chabon');

mysql> SELECT author_lname,title,released_year FROM books WHERE author_lname='Lahiri' AND released_year > 2000;

mysql> SELECT title,author_lname,pages FROM books WHERE pages BETWEEN 100 AND 200;

mysql> SELECT title,author_lname FROM books WHERE author_lname LIKE 'c%' OR author_lname LIKE 's%';

mysql> SELECT title,author_lname,
    CASE
        WHEN title LIKE '%stories%' THEN 'Short Stories'
        WHEN title LIKE '%Just Kids%' THEN 'Memoir'
        WHEN title LIKE '%Heartbreaking Work%' THEN 'Memoir'
        ELSE 'Novel'
    END AS TYPE
FROM books;


mysql> SELECT CONCAT(author_lname,', ',author_fname) AS 'Author', 
    CASE
        WHEN COUNT(*) >1 THEN CONCAT(COUNT(*),' ','Books...')
        ELSE CONCAT(COUNT(*),' ','Book')
    END AS COUNT
FROM books GROUP BY author_lname,author_fname ORDER BY COUNT DESC;

+-----------------------+------------+
| Author                | COUNT      |
+-----------------------+------------+
| Gaiman, Neil          | 3 Books... |
| Eggers, Dave          | 3 Books... |
| Foster Wallace, David | 2 Books... |
| Lahiri, Jhumpa        | 2 Books... |
| Carver, Raymond       | 2 Books... |
| Smith, Patti          | 1 Book     |
| Saunders, George      | 1 Book     |
| Steinbeck, John       | 1 Book     |
| Chabon, Michael       | 1 Book     |
| Harris, Freida        | 1 Book     |
| DeLillo, Don          | 1 Book     |
| Harris, Dan           | 1 Book     |
+-----------------------+------------+


SQL Relationship Basics:
 - One -to- One
 - One -to- Many *Most Common Relationship, Example: Single Book --> Many Reviews
 - Many -to- Many, Example: Books May Have Multiple Authors, Authors May Have Written Multiple Books

 One -to- Many
 * The Most Common Relationship

 Customers & Orders
 Customer Can Have Multiple Orders, Orders Have 1 Customer

PRIMARY KEY
The PRIMARY KEY constraint uniquely identifies each record in a database table.

FOREIGN KEY
A FOREIGN KEY is a key used to link two tables together.
A FOREIGN KEY is a field (or collection of fields) in one table that refers to the PRIMARY KEY in another table.


CREATE TABLE customers(
    id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    email_address VARCHAR(255) NOT NULL
);

CREATE TABLE orders(
    id INT AUTO_INCREMENT PRIMARY KEY,
    order_date DATE,
    order_amount DECIMAL(8,2),
    customer_id INT,
    FOREIGN KEY(customer_id) REFERENCES customers(id)
);


Joins
A JOIN clause is used to combine rows from two or more tables, based on a related column between them.

Cross Join
First, Most Basic Join
* Useless...
mysql> SELECT * FROM customers,orders;

 - - - 

INNER JOIN
The INNER JOIN keyword selects records that have matching values in both tables.

IMPLICIT INNER JOIN, i.e. join W/O JOIN Keyword

mysql> SELECT * FROM customers,orders WHERE customers.id = orders.customer_id;
+----+------------+-----------+------------------+----+------------+--------------+-------------+
| id | first_name | last_name | email_address    | id | order_date | order_amount | customer_id |
+----+------------+-----------+------------------+----+------------+--------------+-------------+
|  1 | Boy        | George    | george@gmail.com |  1 | 2016-02-10 |        99.99 |           1 |
|  1 | Boy        | George    | george@gmail.com |  2 | 2017-11-11 |        35.50 |           1 |
|  2 | George     | Michael   | gm@gmail.com     |  3 | 2014-12-12 |       800.67 |           2 |
|  2 | George     | Michael   | gm@gmail.com     |  4 | 2015-01-03 |        12.50 |           2 |
|  5 | Bette      | Davis     | bette@aol.com    |  5 | 1999-04-11 |       450.25 |           5 |
+----+------------+-----------+------------------+----+------------+--------------+-------------+

EXPLICIT INNER JOIN, i.e. Keyword JOIN

mysql> SELECT first_name,last_name,order_date,order_amount FROM customers JOIN orders ON customers.id = orders.customer_id;        
+------------+-----------+------------+--------------+
| first_name | last_name | order_date | order_amount |
+------------+-----------+------------+--------------+
| Boy        | George    | 2016-02-10 |        99.99 |
| Boy        | George    | 2017-11-11 |        35.50 |
| George     | Michael   | 2014-12-12 |       800.67 |
| George     | Michael   | 2015-01-03 |        12.50 |
| Bette      | Davis     | 1999-04-11 |       450.25 |
+------------+-----------+------------+--------------+

mysql> SELECT first_name,last_name,order_date,SUM(order_amount) AS total_spent FROM customers JOIN orders ON customers.id = orders.customer_id GROUP BY customers.id ORDER BY total_spent DESC;
+------------+-----------+------------+-------------+
| first_name | last_name | order_date | total_spent |
+------------+-----------+------------+-------------+
| George     | Michael   | 2014-12-12 |      813.17 |
| Bette      | Davis     | 1999-04-11 |      450.25 |
| Boy        | George    | 2016-02-10 |      135.49 |
+------------+-----------+------------+-------------+



LEFT JOIN
The LEFT JOIN keyword returns all records from the left table (table1), and the matched records from the right table (table2). The result is NULL from the right side, if there is no match.

mysql> SELECT * FROM customers LEFT JOIN orders ON customers.id = orders.customer_id;
+----+------------+-----------+------------------+------+------------+--------------+-------------+
| id | first_name | last_name | email_address    | id   | order_date | order_amount | customer_id |
+----+------------+-----------+------------------+------+------------+--------------+-------------+
|  1 | Boy        | George    | george@gmail.com |    1 | 2016-02-10 |        99.99 |           1 |
|  1 | Boy        | George    | george@gmail.com |    2 | 2017-11-11 |        35.50 |           1 |
|  2 | George     | Michael   | gm@gmail.com     |    3 | 2014-12-12 |       800.67 |           2 |
|  2 | George     | Michael   | gm@gmail.com     |    4 | 2015-01-03 |        12.50 |           2 |
|  3 | David      | Bowie     | david@gmail.com  | NULL | NULL       |         NULL |        NULL |
|  4 | Blue       | Steele    | blue@gmail.com   | NULL | NULL       |         NULL |        NULL |
|  5 | Bette      | Davis     | bette@aol.com    |    5 | 1999-04-11 |       450.25 |           5 |
+----+------------+-----------+------------------+------+------------+--------------+-------------+

mysql> SELECT first_name,last_name,order_date,order_amount FROM customers LEFT JOIN orders ON customers.id = orders.customer_id;   
+------------+-----------+------------+--------------+
| first_name | last_name | order_date | order_amount |
+------------+-----------+------------+--------------+
| Boy        | George    | 2016-02-10 |        99.99 |
| Boy        | George    | 2017-11-11 |        35.50 |
| George     | Michael   | 2014-12-12 |       800.67 |
| George     | Michael   | 2015-01-03 |        12.50 |
| David      | Bowie     | NULL       |         NULL |
| Blue       | Steele    | NULL       |         NULL |
| Bette      | Davis     | 1999-04-11 |       450.25 |
+------------+-----------+------------+--------------+

mysql> SELECT first_name,last_name,SUM(order_amount) FROM customers LEFT JOIN orders ON customers.id = orders.customer_id GROUP BY customers.id;
+------------+-----------+-------------------+
| first_name | last_name | SUM(order_amount) |
+------------+-----------+-------------------+
| Boy        | George    |            135.49 |
| George     | Michael   |            813.17 |
| David      | Bowie     |              NULL |
| Blue       | Steele    |              NULL |
| Bette      | Davis     |            450.25 |
+------------+-----------+-------------------+


** IFNULL
mysql> SELECT first_name,last_name,IFNULL(SUM(order_amount), 0) AS total_spent FROM customers LEFT JOIN orders ON customers.id = orders.customer_id GROUP BY customers.id;                                                                                            
+------------+-----------+-------------+
| first_name | last_name | total_spent |
+------------+-----------+-------------+
| Boy        | George    |      135.49 |
| George     | Michael   |      813.17 |
| David      | Bowie     |        0.00 |
| Blue       | Steele    |        0.00 |
| Bette      | Davis     |      450.25 |
+------------+-----------+-------------+


RIGHT JOIN
The RIGHT JOIN keyword returns all records from the right table (table2), and the matched records from the left table (table1). The result is NULL from the left side, when there is no match.

mysql> SELECT * FROM customers RIGHT JOIN orders ON customers.id = orders.customer_id;                                             
+------+------------+-----------+------------------+----+------------+--------------+-------------+
| id   | first_name | last_name | email_address    | id | order_date | order_amount | customer_id |
+------+------------+-----------+------------------+----+------------+--------------+-------------+
|    1 | Boy        | George    | george@gmail.com |  1 | 2016-02-10 |        99.99 |           1 |
|    1 | Boy        | George    | george@gmail.com |  2 | 2017-11-11 |        35.50 |           1 |
|    2 | George     | Michael   | gm@gmail.com     |  3 | 2014-12-12 |       800.67 |           2 |
|    2 | George     | Michael   | gm@gmail.com     |  4 | 2015-01-03 |        12.50 |           2 |
|    5 | Bette      | Davis     | bette@aol.com    |  5 | 1999-04-11 |       450.25 |           5 |
+------+------------+-----------+------------------+----+------------+--------------+-------------+

ON DELETE CASCADE
*** When A Customer Is Deleted With A Corresponding Order, Delete The Order As Well...

CREATE TABLE orders(
    id INT AUTO_INCREMENT PRIMARY KEY,
    order_date DATE,
    order_amount DECIMAL(8,2),
    customer_id INT,
    FOREIGN KEY(customer_id) REFERENCES customers(id)
    ON DELETE CASCADE
);


EXERCISES:

CREATE TABLE students(
       id INT AUTO_INCREMENT PRIMARY KEY,
       first_name VARCHAR(255)
);

CREATE TABLE papers(
       title VARCHAR(255),
       grade INT,
       student_id INT,
       FOREIGN KEY(student_id) REFERENCES students(id)
);

INSERT INTO students (first_name) VALUES 
('Caleb'), ('Samantha'), ('Raj'), ('Carlos'), ('Lisa');

INSERT INTO papers (student_id, title, grade ) VALUES
(1, 'My First Book Report', 60),
(1, 'My Second Book Report', 75),
(2, 'Russian Lit Through The Ages', 94),
(2, 'De Montaigne and The Art of The Essay', 98),
(4, 'Borges and Magical Realism', 89);


mysql> SELECT students.first_name,papers.title,papers.grade FROM students LEFT JOIN papers ON students.id=papers.student_id WHERE papers.title != 'NULL' ORDER BY students.first_name DESC;
+------------+---------------------------------------+-------+
| first_name | title                                 | grade |
+------------+---------------------------------------+-------+
| Samantha   | Russian Lit Through The Ages          |    94 |
| Samantha   | De Montaigne and The Art of The Essay |    98 |
| Carlos     | Borges and Magical Realism            |    89 |
| Caleb      | My First Book Report                  |    60 |
| Caleb      | My Second Book Report                 |    75 |
+------------+---------------------------------------+-------+


mysql> SELECT students.first_name,papers.title,papers.grade FROM students LEFT JOIN papers ON students.id=papers.student_id;
+------------+---------------------------------------+-------+
| first_name | title                                 | grade |
+------------+---------------------------------------+-------+
| Caleb      | My First Book Report                  |    60 |
| Caleb      | My Second Book Report                 |    75 |
| Samantha   | Russian Lit Through The Ages          |    94 |
| Samantha   | De Montaigne and The Art of The Essay |    98 |
| Raj        | NULL                                  |  NULL |
| Carlos     | Borges and Magical Realism            |    89 |
| Lisa       | NULL                                  |  NULL |
+------------+---------------------------------------+-------+


SELECT students.first_name,
CASE
       WHEN papers.title IS NULL THEN 'MISSING...'
       ELSE papers.title
END AS title,
CASE
       WHEN papers.grade IS NULL THEN '0'
       ELSE papers.grade
END AS grade
FROM students LEFT JOIN papers ON students.id=papers.student_id;

+------------+---------------------------------------+-------+
| first_name | title                                 | grade |
+------------+---------------------------------------+-------+
| Caleb      | My First Book Report                  | 60    |
| Caleb      | My Second Book Report                 | 75    |
| Samantha   | Russian Lit Through The Ages          | 94    |
| Samantha   | De Montaigne and The Art of The Essay | 98    |
| Raj        | MISSING...                            | 0     |
| Carlos     | Borges and Magical Realism            | 89    |
| Lisa       | MISSING...                            | 0     |
+------------+---------------------------------------+-------+

SELECT students.first_name,
CASE
       WHEN AVG(papers.grade) IS NULL THEN '0'
       ELSE AVG(papers.grade)
END AS average
FROM students LEFT JOIN papers ON students.id=papers.student_id GROUP BY students.first_name ORDER BY average DESC,students.first_name DESC;

+------------+---------+
| first_name | average |
+------------+---------+
| Samantha   | 96.0000 |
| Carlos     | 89.0000 |
| Caleb      | 67.5000 |
| Raj        | 0       |
| Lisa       | 0       |
+------------+---------+


SELECT students.first_name,
CASE
       WHEN AVG(papers.grade) IS NULL THEN '0'
       ELSE AVG(papers.grade)
END AS average,
CASE
       WHEN AVG(papers.grade) >=75 THEN 'PASSING'
       ELSE 'FAILING...'
END AS passing_status
FROM students LEFT JOIN papers ON students.id=papers.student_id GROUP BY students.first_name ORDER BY average DESC,students.first_name DESC;

+------------+---------+----------------+
| first_name | average | passing_status |
+------------+---------+----------------+
| Samantha   | 96.0000 | PASSING        |
| Carlos     | 89.0000 | PASSING        |
| Caleb      | 67.5000 | FAILING...     |
| Raj        | 0       | FAILING...     |
| Lisa       | 0       | FAILING...     |
+------------+---------+----------------+

