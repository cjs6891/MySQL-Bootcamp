MySQL Bootcamp

cloud9
https://c9.io/

$ mysql-ctl start 
Installing MySQL
 * Stopping MySQL database server mysqld
   ...done.
 * Starting MySQL database server mysqld
   ...done.
 * Checking for tables which need an upgrade, are corrupt or were 
not closed cleanly.

MySQL 5.5 database added.  Please make note of these credentials:

       Root User: cjs6891
   Database Name: c9

 * Starting MySQL database server mysqld
   ...done.

Start - mysql-ctl start
Stop  - mysql-ctl stop
Status - mysql-ctl status
CLI - mysql-ctl cli

Quit -and/or- Exit MySQL
exit;
quit;
\q;
ctrl-c

mysql> help; - List MySQL Commands

mysql> help contents;
You asked for help about help category: "Contents"
For more information, type 'help <item>', where <item> is one of the following
categories:
   Account Management
   Administration
   Compound Statements
   Data Definition
   Data Manipulation
   Data Types
   Functions
   Functions and Modifiers for Use with GROUP BY
   Geographic Features
   Help Metadata
   Language Structure
   Plugins
   Procedures
   Storage Engines
   Table Maintenance
   Transactions
   User-Defined Functions
   Utility

mysql> show databases; - shows databases, current MySQL Install

mysql> select @@hostname; - get username & hostname

mysql> CREATE DATABASE <NAME>; create a new database

mysql> DROP DATABASE <NAME>; - delete database
* Once you drop a database, it's gone!

mysql> USE <DATABASE>; - use a specific database

mysql> SELECT DATABASE(); - show what database you're "using"

The SQL CREATE TABLE Statement:
*Table Names Should Be Pluralized...

CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    column3 datatype,
   .....
);

CREATE TABLE cats
  (
    name VARCHAR(100),
    age INT
  );

mysql> SHOW TABLES; - show tables in database

mysql> SHOW COLUMNS FROM <TABLENAME>; - show columns in table

mysql> DESC <TABLENAME>; - describe a table

mysql> DROP TABLE <TABLENAME>; - delete a table
* Once you drop a table, it's gone!

The SQL INSERT INTO Statement
The INSERT INTO statement is used to insert new records in a table.

It is possible to write the INSERT INTO statement in two ways.
The first way specifies both the column names and the values to be inserted:

mysql> INSERT INTO table_name (column1, column2, column3, ...)
VALUES (value1, value2, value3, ...);

If you are adding values for all the columns of the table, you do not need to specify the column names in the SQL query. However, make sure the order of the values is in the same order as the columns in the table. The INSERT INTO syntax would be as follows:

mysql> INSERT INTO table_name
VALUES (value1, value2, value3, ...);

mysql> INSERT INTO people
    -> VALUES ('Linda', 'Belcher', 45), ('Phillip', 'Frond', 38), ('Calvin', 'Fischoeder', 70);
Query OK, 3 rows affected (0.01 sec)
Records: 3  Duplicates: 0  Warnings: 0


The SQL SELECT Statement
The SELECT statement is used to select data from a database.

mysql> SELECT * FROM table_name;

mysql> SHOW WARNINGS; - show warning message(s)


What is a NULL Value?
A field with a NULL value is a field with no value (EMPTY).

* If a field in a table is optional, it is possible to insert a new record or update a record without adding a value to this field. Then, the field will be saved with a NULL value.

*** Note: It is very important to understand that a NULL value is different from a zero value or a field that contains spaces. A field with a NULL value is one that has been left blank during record creation...

SELECT column_names
FROM table_name
WHERE column_name IS NULL;


SQL DEFAULT Constraint
The DEFAULT constraint is used to provide a default value for a column.

The default value will be added to all new records IF no other value is specified.

CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    City varchar(255) DEFAULT 'Sandnes'
);

SQL PRIMARY KEY Constraint
The PRIMARY KEY constraint uniquely identifies each record in a database table.

Primary keys must contain UNIQUE values, and cannot contain NULL values.

A table can have only one primary key, which may consist of single or multiple fields.

CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    PRIMARY KEY (ID)
);

Auto-increment allows a unique number to be generated automatically when a new record is inserted into a table.

CREATE TABLE Persons (
    ID int NOT NULL AUTO_INCREMENT,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    PRIMARY KEY (ID)
);

Table Constraints Exercise Solution
Defining The employees table:

CREATE TABLE employees (
    id INT AUTO_INCREMENT NOT NULL,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    middle_name VARCHAR(255),
    age INT NOT NULL,
    current_status VARCHAR(255) NOT NULL DEFAULT 'employed',
    PRIMARY KEY(id)
);

Another way of defining a primary key:

CREATE TABLE employees (
    id INT AUTO_INCREMENT NOT NULL PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    middle_name VARCHAR(255),
    age INT NOT NULL,
    current_status VARCHAR(255) NOT NULL DEFAULT 'employed'
);

A test INSERT:
INSERT INTO employees(last_name, first_name, age)
    VALUES("Takacs", "Robert", 41), ("Dingler","Sheila",31);


CRUD

Create - INSERT INTO
Read - SELECT
Update
Delete/Destroy

Recreate a new cats table:

DROP TABLE cats;

CREATE TABLE cats 
  ( 
     cat_id INT NOT NULL AUTO_INCREMENT, 
     name   VARCHAR(100), 
     breed  VARCHAR(100), 
     age    INT, 
     PRIMARY KEY (cat_id) 
  );

INSERT INTO cats(name, breed, age) 
VALUES ('Ringo', 'Tabby', 4),
       ('Cindy', 'Maine Coon', 10),
       ('Dumbledore', 'Maine Coon', 11),
       ('Egg', 'Persian', 4),
       ('Misty', 'Tabby', 13),
       ('George Michael', 'Ragdoll', 9),
       ('Jackson', 'Sphynx', 7);


mysql> SELECT * FROM cats;
              ^
              |----- "Give Me All Columns"

mysql> SELECT name, age FROM cats;
+----------------+------+
| name           | age  |
+----------------+------+
| Ringo          |    4 |
| Cindy          |   10 |
| Dumbledore     |   11 |
| Egg            |    4 |
| Misty          |   11 |
| George Michael |    9 |
| Jackson        |    7 |
+----------------+------+

The SQL WHERE Clause
The WHERE clause is used to filter records.

he WHERE clause is used to extract only those records that fulfill a specified condition.

SELECT column1, column2, ...
FROM table_name
WHERE condition;

mysql> SELECT * FROM cats WHERE age=4;

mysql> SELECT * FROM cats WHERE name='Egg'; - Case Insensitive

mysql> SELECT cat_id FROM cats; 
mysql> SELECT name, breed FROM cats; 
mysql> SELECT name, age FROM cats WHERE breed='Tabby'; 
mysql> SELECT cat_id, age FROM cats WHERE cat_id=age; 
mysql> SELECT * FROM cats WHERE cat_id=age;


SQL Aliases
SQL aliases are used to give a table, or a column in a table, a temporary name.
* Aliases are often used to make column names more readable. An alias only exists for the duration of the query.

Alias Column Syntax
SELECT column_name AS alias_name
FROM table_name;

Alias Table Syntax
SELECT column_name(s)
FROM table_name AS alias_name;

mysql> SELECT cat_id AS id, name FROM cats;
mysql> SELECT name AS 'Cat Name', breed AS 'Breed' FROM cats;


The SQL UPDATE Statement
The UPDATE statement is used to modify the existing records in a table.

UPDATE table_name
SET column1 = value1, column2 = value2, ...
WHERE condition;

mysql> UPDATE cats SET breed='Shorthair' WHERE breed='Tabby';

mysql> UPDATE cats SET age=14 WHERE name='Misty';

* A Good Rule of Thumb
SELECT before you UPDATE; be sure to target the data before updating the data, there is no undo button...

mysql> UPDATE cats SET name='Jack' WHERE name='jackson';
mysql> UPDATE cats SET breed='British Shorthair' WHERE name='ringo';
mysql> UPDATE cats SET age=12 WHERE breed='persian';

mysql> SELECT * FROM cats WHERE name='Jackson';
mysql> UPDATE cats SET name='Jack' WHERE name='Jackson';
mysql> SELECT * FROM cats WHERE name='Jackson';
mysql> SELECT * FROM cats WHERE name='Jack';
mysql> SELECT * FROM cats WHERE name='Ringo';
mysql> UPDATE cats SET breed='British Shorthair' WHERE name='Ringo';
mysql> SELECT * FROM cats WHERE name='Ringo';
mysql> SELECT * FROM cats;
mysql> SELECT * FROM cats WHERE breed='Maine Coon';
mysql> UPDATE cats SET age=12 WHERE breed='Maine Coon';
mysql> SELECT * FROM cats WHERE breed='Maine Coon';


The SQL DELETE Statement
The DELETE statement is used to delete existing records in a table.

mysql> DELETE FROM table_name
mysql> WHERE condition;


Delete All Records
It is possible to delete all rows in a table without deleting the table. This means that the table structure, attributes, and indexes will be intact:

DELETE FROM <TABLENAME>; - deletes all records, empty entire table!
-or-
DELETE * FROM <TABLENAME>;

mysql> DELETE FROM cats WHERE name='Egg';
mysql> SELECT * FROM cats;
mysql> SELECT * FROM cats WHERE name='egg';
mysql> DELETE FROM cats WHERE name='egg';
mysql> SELECT * FROM cats;
mysql> DELETE FROM cats;

CRUD Exercise...

CREATE TABLE closet_inventory(
    shirt_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    article VARCHAR(255) NOT NULL,
    color VARCHAR(255) NOT NULL,
    shirt_size VARCHAR(255) NOT NULL,
    last_worn INT NOT NULL);

INSERT INTO closet_inventory(article, color, shirt_size, last_worn)
    VALUES
    ('t-shirt', 'white', 'S', 10),
    ('t-shirt', 'green', 'S', 200),
    ('polo shirt', 'black', 'M', 10),
    ('tank top', 'blue', 'S', 50),
    ('t-shirt', 'pink', 'S', 0),
    ('polo shirt', 'red', 'M', 5),
    ('tank top', 'white', 'S', 200),
    ('tank top', 'blue', 'M', 15);

INSERT INTO closet_inventory(article, color, shirt_size, last_worn)
    VALUES
    ('polo shirt', 'purple', 'M', 50);

SELECT article,color FROM closet_inventory;

SELECT * FROM closet_inventory WHERE shirt_size='M';

SELECT article,color,shirt_size,last_worn FROM closet_inventory WHERE shirt_size='M';

UPDATE closet_inventory SET color='off white', shirt_size='XS' WHERE color='white';

UPDATE closet_inventory SET last_worn=0 WHERE last_worn=15;

SELECT * FROM closet_inventory WHERE last_worn=15;

SELECT * FROM closet_inventory WHERE article='polo shirt';

UPDATE closet_inventory SET shirt_size='L' WHERE article='polo shirt';

DROP TABLE closet_inventory;

DELETE FROM closet_inventory;

DELETE FROM closet_inventory WHERE article='tank top';

DELETE FROM closet_inventory WHERE last_worn=200;


Running SQL Files, using "source"
*Refer to file full path to use

mysql> source create_tbl.sql

CREATE TABLE books 
    (
        book_id INT NOT NULL AUTO_INCREMENT,
        title VARCHAR(100),
        author_fname VARCHAR(100),
        author_lname VARCHAR(100),
        released_year INT,
        stock_quantity INT,
        pages INT,
        PRIMARY KEY(book_id)
    );
 
INSERT INTO books (title, author_fname, author_lname, released_year, stock_quantity, pages)
VALUES
('The Namesake', 'Jhumpa', 'Lahiri', 2003, 32, 291),
('Norse Mythology', 'Neil', 'Gaiman',2016, 43, 304),
('American Gods', 'Neil', 'Gaiman', 2001, 12, 465),
('Interpreter of Maladies', 'Jhumpa', 'Lahiri', 1996, 97, 198),
('A Hologram for the King: A Novel', 'Dave', 'Eggers', 2012, 154, 352),
('The Circle', 'Dave', 'Eggers', 2013, 26, 504),
('The Amazing Adventures of Kavalier & Clay', 'Michael', 'Chabon', 2000, 68, 634),
('Just Kids', 'Patti', 'Smith', 2010, 55, 304),
('A Heartbreaking Work of Staggering Genius', 'Dave', 'Eggers', 2001, 104, 437),
('Coraline', 'Neil', 'Gaiman', 2003, 100, 208),
('What We Talk About When We Talk About Love: Stories', 'Raymond', 'Carver', 1981, 23, 176),
("Where I'm Calling From: Selected Stories", 'Raymond', 'Carver', 1989, 12, 526),
('White Noise', 'Don', 'DeLillo', 1985, 49, 320),
('Cannery Row', 'John', 'Steinbeck', 1945, 95, 181),
('Oblivion: Stories', 'David', 'Foster Wallace', 2004, 172, 329),
('Consider the Lobster', 'David', 'Foster Wallace', 2005, 92, 343);
 
 
SELECT database();
 
CREATE DATABASE book_shop;
 
use book_shop;
 
show tables;
 
source book_data.sql
 
DESC books;
 
SELECT * FROM books;


MySQL String Functions
https://dev.mysql.com/doc/refman/5.7/en/string-functions.html

CONCAT()  Return concatenated string

mysql> SELECT CONCAT(author_lname,', ',author_fname) FROM books;

CONCAT W/Alias
mysql> SELECT CONCAT(author_lname,', ',author_fname) AS 'Full Name' FROM books;

mysql> SELECT author_fname AS 'First Name', author_lname AS 'Last Name', CONCAT(author_fname,' ',author_lname) AS 'Full Name' FROM books;

+------------+----------------+----------------------+
| First Name | Last Name      | Full Name            |
+------------+----------------+----------------------+
| Jhumpa     | Lahiri         | Jhumpa Lahiri        |
| Neil       | Gaiman         | Neil Gaiman          |
| Neil       | Gaiman         | Neil Gaiman          |
| Jhumpa     | Lahiri         | Jhumpa Lahiri        |
| Dave       | Eggers         | Dave Eggers          |
| Dave       | Eggers         | Dave Eggers          |
| Michael    | Chabon         | Michael Chabon       |
| Patti      | Smith          | Patti Smith          |
| Dave       | Eggers         | Dave Eggers          |
| Neil       | Gaiman         | Neil Gaiman          |
| Raymond    | Carver         | Raymond Carver       |
| Raymond    | Carver         | Raymond Carver       |
| Don        | DeLillo        | Don DeLillo          |
| John       | Steinbeck      | John Steinbeck       |
| David      | Foster Wallace | David Foster Wallace |
| David      | Foster Wallace | David Foster Wallace |
+------------+----------------+----------------------+

CONCAT_WS() Return concatenate with separator

mysql> SELECT CONCAT_WS(' - ', author_lname, author_fname) FROM books;                          
+----------------------------------------------+
| CONCAT_WS(' - ', author_lname, author_fname) |
+----------------------------------------------+
| Lahiri - Jhumpa                              |
| Gaiman - Neil                                |


mysql> SELECT CONCAT_WS(', ', author_lname, author_fname) AS 'Last Name, First Name' FROM books;                           
+-----------------------+
| Last Name, First Name |
+-----------------------+
| Lahiri, Jhumpa        |
| Gaiman, Neil          |

